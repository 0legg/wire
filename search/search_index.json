{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Wire \u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema. Protocol Buffers Google s Protocol Buffers are built around a great schema language: It s cross platform and language independent. Whatever programming language you use, you ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It s focused. Proto schemas describe your data models. That s it. Here s a sample message definition: syntax = proto2 ; package squareup . dinosaurs ; option java_package = com.squareup.dinosaurs ; import squareup/geology/period.proto ; message Dinosaur { // Common name of this dinosaur, like Stegosaurus . optional string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; optional squareup.geology.Period period = 5 ; } And here s an enum definition: syntax = proto2 ; package squareup . geology ; option java_package = com.squareup.geology ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 1 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 2 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 3 ; } This schema language is Protocol Buffers best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let s encode this dinosaur: { name: Stegosaurus , period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 3 | 2 0b Stegosaurus .length() 53 S 74 t 65 e 67 g 6f o 73 s 61 a 75 u 72 r 75 u 73 s 28 tag: period(5), field encoding: VARINT(0). 5 3 | 0 02 JURASSIC(2) Why Wire? The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you d write by hand: it s documented, formatted, and simple. Wire s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today s data won\u2019t have a value for that field. Here s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source file: squareup/dinosaurs/dinosaur.proto at 9:1 package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.WireField ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message Dinosaur , Dinosaur . Builder { public static final ProtoAdapter Dinosaur ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class ); private static final long serialVersionUID = 0 L ; public static final String DEFAULT_NAME = ; public static final Period DEFAULT_PERIOD = Period . CRETACEOUS ; /** * Common name of this dinosaur, like Stegosaurus . */ @WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#STRING , label = WireField . Label . REPEATED ) public final List String picture_urls ; @WireField ( tag = 5 , adapter = com.squareup.geology.Period#ADAPTER ) public final Period period ; public Dinosaur ( String name , List String picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List String picture_urls , Period period , ByteString unknownFields ) { super ( unknownFields ); this . name = name ; this . picture_urls = immutableCopyOf ( picture_urls , picture_urls ); this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = copyOf ( picture_urls , picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if (!( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return equals ( unknownFields (), o . unknownFields ()) equals ( name , o . name ) equals ( picture_urls , o . picture_urls ) equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + ( picture_urls != null ? picture_urls . hashCode () : 1 ); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends com . squareup . wire . Message . Builder Dinosaur , Builder { public String name ; public List String picture_urls ; public Period period ; public Builder () { picture_urls = newMutableList (); } /** * Common name of this dinosaur, like Stegosaurus . */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List String picture_urls ) { checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( Stegosaurus ) . period ( Period . JURASSIC ) . build (); System . out . println ( My favorite dinosaur existed in the + stegosaurus . period + period. ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD; Wire Kotlin Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source file: squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.WireField import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like Stegosaurus . */ @field : WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val name : String ? = null , /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#STRING , label = WireField . Label . REPEATED ) val picture_urls : List String = emptyList (), @field : WireField ( tag = 5 , adapter = com.squareup.geology.Period#ADAPTER ) val period : Period ? = null , unknownFields : ByteString = ByteString . EMPTY ) : Message Dinosaur , Nothing ( ADAPTER , unknownFields ) { @Deprecated ( message = Shouldn t be used in Kotlin , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing { throw AssertionError () } override fun equals ( other : Any ?): Boolean { if ( other === this ) return true if ( other ! is Dinosaur ) return false return unknownFields == other . unknownFields name == other . name picture_urls == other . picture_urls period == other . period } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf String () if ( name != null ) result += name=$name if ( picture_urls . isNotEmpty ()) result += picture_urls=$picture_urls if ( period != null ) result += period=$period return result . joinToString ( prefix = Dinosaur{ , separator = , , postfix = } ) } fun copy ( name : String ? = this . name , picture_urls : List String = this . picture_urls , period : Period ? = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter Dinosaur = object : ProtoAdapter Dinosaur ( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class ) { override fun encodedSize ( value : Dinosaur ): Int = ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) + ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) + Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) + value . unknownFields . size override fun encode ( writer : ProtoWriter , value : Dinosaur ) { ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String ? = null val picture_urls = mutableListOf String () var period : Period ? = null val unknownFields = reader . forEachTag { tag - when ( tag ) { 1 - name = ProtoAdapter . STRING . decode ( reader ) 2 - picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 - period = Period . ADAPTER . decode ( reader ) else - reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = Stegosaurus , period = Period . JURASSIC ) println ( My favorite dinosaur existed in the ${stegosaurus.period} period. ) Here s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( https://www.flickr.com/photos/tags/Stegosaurus/ ) ) println ( Here are some photos of ${stegosaurus.name}: ${stegosaurus.picture_urls} ) Generating Code With Wire Wire s compiler is available via a Maven plugin. Put .proto sources in your project s src/main/proto directory, then use the plugin to generate .java files. The plugin will automatically add the generated Java code to your project s source roots. build plugins plugin groupId com.squareup.wire /groupId artifactId wire-maven-plugin /artifactId version ${project.version} /version executions execution phase generate-sources /phase goals goal generate-sources /goal /goals configuration includes !-- proto package names to generate code for -- include squareup.dinosaurs.* /include include squareup.geology.* /include /includes /configuration /execution /executions /plugin /plugins /build Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. If you don t use Maven, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; } Get Wire The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: dependency groupId com.squareup.wire /groupId artifactId wire-runtime /artifactId version 2.2.0 /version /dependency With Gradle: compile com.squareup.wire:wire-runtime:2.2.0 Wire 3 Alpha With Maven: dependency groupId com.squareup.wire /groupId artifactId wire-runtime /artifactId version 3.0.0-rc01 /version /dependency With Gradle: api com.squareup.wire:wire-runtime:3.0.0-rc01 Snapshots of the development version are available in Sonatype s snapshots repository . Unsupported Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code. Further Documentation See Google s excellent documentation on the structure and syntax of proto schemas.","title":"Overview"},{"location":"#wire","text":"\u201cA man got to have a code!\u201d - Omar Little As our teams and programs grow, the variety and volume of data also grows. Success will turn your simple data models into complex ones! Whether your application is storing data to disk or transmitting it over a network, the structure and interpretation of that data should be clear. Consumers work best with data they understand! Schemas describe and document data models. If you have data, you should have a schema.","title":"Wire"},{"location":"#protocol-buffers","text":"Google s Protocol Buffers are built around a great schema language: It s cross platform and language independent. Whatever programming language you use, you ll be able to use proto schemas with your application. Proto schemas are backwards-compatible and future-proof. You can evolve your schema as your application loses old features and gains new ones. It s focused. Proto schemas describe your data models. That s it. Here s a sample message definition: syntax = proto2 ; package squareup . dinosaurs ; option java_package = com.squareup.dinosaurs ; import squareup/geology/period.proto ; message Dinosaur { // Common name of this dinosaur, like Stegosaurus . optional string name = 1 ; // URLs with images of this dinosaur. repeated string picture_urls = 2 ; optional squareup.geology.Period period = 5 ; } And here s an enum definition: syntax = proto2 ; package squareup . geology ; option java_package = com.squareup.geology ; enum Period { // 145.5 million years ago \u2014 66.0 million years ago. CRETACEOUS = 1 ; // 201.3 million years ago \u2014 145.0 million years ago. JURASSIC = 2 ; // 252.17 million years ago \u2014 201.3 million years ago. TRIASSIC = 3 ; } This schema language is Protocol Buffers best feature. You might even use it purely for documentation purposes, such as to describe a JSON API. Protocol Buffers also defines a compact binary encoding of messages that conform to the schema. This encoding is fast to encode, fast to decode, small to transmit, and small to store. The binary encoding uses numeric tags from the schema, like the 5 for period above. For example, let s encode this dinosaur: { name: Stegosaurus , period: JURASSIC } The encoded value is just 15 bytes: Hex Description 0a tag: name(1), field encoding: LENGTH_DELIMITED(2). 1 3 | 2 0b Stegosaurus .length() 53 S 74 t 65 e 67 g 6f o 73 s 61 a 75 u 72 r 75 u 73 s 28 tag: period(5), field encoding: VARINT(0). 5 3 | 0 02 JURASSIC(2)","title":"Protocol Buffers"},{"location":"#why-wire","text":"The Protocol Buffers schema language and binary encoding are both defined by Google. Wire is an independent implementation from Square that s specifically designed for Android and Java. For each message type defined in the schema, Wire generates an immutable model class and its builder. The generated code looks like code you d write by hand: it s documented, formatted, and simple. Wire s APIs should feel at home to programmers who like Effective Java . That said, there are some interesting design decisions in Wire: Wire messages declare public final fields instead of the usual getter methods. This cuts down on both code generated and code executed. Less code is particularly beneficial for Android programs. Wire avoids case mapping. A field declared as picture_urls in a schema yields a Java field picture_urls and not the conventional pictureUrls camel case. Though the name feels awkward at first, it s fantastic whenever you use grep or more sophisticated search tools. No more mapping when navigating between schema, Java source code, and data. It also provides a gentle reminder to calling code that proto messages are a bit special. Primitive types are always boxed. If a field is absent, its value is null . This is used for naturally optional fields, such as a dinosaur whose period is unknown. A field may also be null due to schema evolution: if tomorrow we add a carnivore boolean to our message definition, today s data won\u2019t have a value for that field. Here s the compact generated code for the Dinosaur message defined above: // Code generated by Wire protocol buffer compiler, do not edit. // Source file: squareup/dinosaurs/dinosaur.proto at 9:1 package com.squareup.dinosaurs ; import com.squareup.geology.Period ; import com.squareup.wire.Message ; import com.squareup.wire.ProtoAdapter ; import com.squareup.wire.WireField ; import java.util.List ; import okio.ByteString ; public final class Dinosaur extends Message Dinosaur , Dinosaur . Builder { public static final ProtoAdapter Dinosaur ADAPTER = ProtoAdapter . newMessageAdapter ( Dinosaur . class ); private static final long serialVersionUID = 0 L ; public static final String DEFAULT_NAME = ; public static final Period DEFAULT_PERIOD = Period . CRETACEOUS ; /** * Common name of this dinosaur, like Stegosaurus . */ @WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) public final String name ; /** * URLs with images of this dinosaur. */ @WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#STRING , label = WireField . Label . REPEATED ) public final List String picture_urls ; @WireField ( tag = 5 , adapter = com.squareup.geology.Period#ADAPTER ) public final Period period ; public Dinosaur ( String name , List String picture_urls , Period period ) { this ( name , picture_urls , period , ByteString . EMPTY ); } public Dinosaur ( String name , List String picture_urls , Period period , ByteString unknownFields ) { super ( unknownFields ); this . name = name ; this . picture_urls = immutableCopyOf ( picture_urls , picture_urls ); this . period = period ; } @Override public Builder newBuilder () { Builder builder = new Builder (); builder . name = name ; builder . picture_urls = copyOf ( picture_urls , picture_urls ); builder . period = period ; builder . addUnknownFields ( unknownFields ()); return builder ; } @Override public boolean equals ( Object other ) { if ( other == this ) return true ; if (!( other instanceof Dinosaur )) return false ; Dinosaur o = ( Dinosaur ) other ; return equals ( unknownFields (), o . unknownFields ()) equals ( name , o . name ) equals ( picture_urls , o . picture_urls ) equals ( period , o . period ); } @Override public int hashCode () { int result = super . hashCode ; if ( result == 0 ) { result = unknownFields (). hashCode (); result = result * 37 + ( name != null ? name . hashCode () : 0 ); result = result * 37 + ( picture_urls != null ? picture_urls . hashCode () : 1 ); result = result * 37 + ( period != null ? period . hashCode () : 0 ); super . hashCode = result ; } return result ; } public static final class Builder extends com . squareup . wire . Message . Builder Dinosaur , Builder { public String name ; public List String picture_urls ; public Period period ; public Builder () { picture_urls = newMutableList (); } /** * Common name of this dinosaur, like Stegosaurus . */ public Builder name ( String name ) { this . name = name ; return this ; } /** * URLs with images of this dinosaur. */ public Builder picture_urls ( List String picture_urls ) { checkElementsNotNull ( picture_urls ); this . picture_urls = picture_urls ; return this ; } public Builder period ( Period period ) { this . period = period ; return this ; } @Override public Dinosaur build () { return new Dinosaur ( name , picture_urls , period , buildUnknownFields ()); } } } The Java code to create and access proto models is compact and readable: Dinosaur stegosaurus = new Dinosaur . Builder () . name ( Stegosaurus ) . period ( Period . JURASSIC ) . build (); System . out . println ( My favorite dinosaur existed in the + stegosaurus . period + period. ); Each type has a corresponding ProtoAdapter that can encode a message to bytes and decode bytes back into a message. Dinosaur stegosaurus = ... byte [] stegosaurusBytes = Dinosaur . ADAPTER . encode ( stegosaurus ); byte [] tyrannosaurusBytes = ... Dinosaur tyrannosaurus = Dinosaur . ADAPTER . decode ( tyrannosaurusBytes ); When accessing a field, use Wire.get() to replace null values with the corresponding default: Period period = Wire . get ( stegosaurus . period , Dinosaur . DEFAULT_PERIOD ); This is equivalent to the following: Period period = stegosaurus.period != null ? stegosaurus.period : Dinosaur.DEFAULT_PERIOD;","title":"Why Wire?"},{"location":"#wire-kotlin","text":"Since version 3.0.0, Wire can generate Kotlin code. See Wire Compiler Gradle Plugin to learn how to configure your build. Kotlin is a pragmatic and expressive programming language that makes it easy to model data. Here s how we used Kotlin to model Protocol Buffers messages: Messages feel like data classes, but in fact they re not. Compiler still generates equals() , hashCode() , toString() and copy() for you. Wire does not generate componentN() functions though, we believe that destructuring declarations are not a good fit for Protocol Buffers: a change in the schema that removes or adds a field might lead to a situation when your destructuring declaration still compiles but now describes a completely different subset of fields, rendering your code incorrect. copy() is a substitute for the Builder , which is not used anymore. If your program relies on the Builder to be present, you may generate code in Java interoperability mode - Wire Compiler Gradle Plugin explains how that works. Fields are generated as properties. While this is idiomatic in Kotlin, Java code will now have to access fields using getters. If your program relies on accessing fields directly, use Java interoperability mode - the compiler will generate @JvmField annotations for each field. The nullability of each field s type depends on its label: required , repeated and map fields get non-nullable types, whereas optional fields are of nullable types. With the exception of required fields, each field has a default value: null for optional fields, emptyList() for repeated fields, emptyMap() for map fields. Here s the same Dinosaur message in Kotlin: // Code generated by Wire protocol buffer compiler, do not edit. // Source file: squareup/dinosaurs/dinosaur.proto package com.squareup.dinosaurs import com.squareup.geology.Period import com.squareup.wire.FieldEncoding import com.squareup.wire.Message import com.squareup.wire.ProtoAdapter import com.squareup.wire.ProtoReader import com.squareup.wire.ProtoWriter import com.squareup.wire.WireField import kotlin.Any import kotlin.AssertionError import kotlin.Boolean import kotlin.Deprecated import kotlin.DeprecationLevel import kotlin.Int import kotlin.Nothing import kotlin.String import kotlin.collections.List import kotlin.hashCode import kotlin.jvm.JvmField import okio.ByteString class Dinosaur ( /** * Common name of this dinosaur, like Stegosaurus . */ @field : WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val name : String ? = null , /** * URLs with images of this dinosaur. */ @field : WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#STRING , label = WireField . Label . REPEATED ) val picture_urls : List String = emptyList (), @field : WireField ( tag = 5 , adapter = com.squareup.geology.Period#ADAPTER ) val period : Period ? = null , unknownFields : ByteString = ByteString . EMPTY ) : Message Dinosaur , Nothing ( ADAPTER , unknownFields ) { @Deprecated ( message = Shouldn t be used in Kotlin , level = DeprecationLevel . HIDDEN ) override fun newBuilder (): Nothing { throw AssertionError () } override fun equals ( other : Any ?): Boolean { if ( other === this ) return true if ( other ! is Dinosaur ) return false return unknownFields == other . unknownFields name == other . name picture_urls == other . picture_urls period == other . period } override fun hashCode (): Int { var result = super . hashCode if ( result == 0 ) { result = name . hashCode () result = result * 37 + picture_urls . hashCode () result = result * 37 + period . hashCode () super . hashCode = result } return result } override fun toString (): String { val result = mutableListOf String () if ( name != null ) result += name=$name if ( picture_urls . isNotEmpty ()) result += picture_urls=$picture_urls if ( period != null ) result += period=$period return result . joinToString ( prefix = Dinosaur{ , separator = , , postfix = } ) } fun copy ( name : String ? = this . name , picture_urls : List String = this . picture_urls , period : Period ? = this . period , unknownFields : ByteString = this . unknownFields ): Dinosaur = Dinosaur ( name , picture_urls , period , unknownFields ) companion object { @JvmField val ADAPTER : ProtoAdapter Dinosaur = object : ProtoAdapter Dinosaur ( FieldEncoding . LENGTH_DELIMITED , Dinosaur :: class ) { override fun encodedSize ( value : Dinosaur ): Int = ProtoAdapter . STRING . encodedSizeWithTag ( 1 , value . name ) + ProtoAdapter . STRING . asRepeated (). encodedSizeWithTag ( 2 , value . picture_urls ) + Period . ADAPTER . encodedSizeWithTag ( 5 , value . period ) + value . unknownFields . size override fun encode ( writer : ProtoWriter , value : Dinosaur ) { ProtoAdapter . STRING . encodeWithTag ( writer , 1 , value . name ) ProtoAdapter . STRING . asRepeated (). encodeWithTag ( writer , 2 , value . picture_urls ) Period . ADAPTER . encodeWithTag ( writer , 5 , value . period ) writer . writeBytes ( value . unknownFields ) } override fun decode ( reader : ProtoReader ): Dinosaur { var name : String ? = null val picture_urls = mutableListOf String () var period : Period ? = null val unknownFields = reader . forEachTag { tag - when ( tag ) { 1 - name = ProtoAdapter . STRING . decode ( reader ) 2 - picture_urls . add ( ProtoAdapter . STRING . decode ( reader )) 5 - period = Period . ADAPTER . decode ( reader ) else - reader . readUnknownField ( tag ) } } return Dinosaur ( name = name , picture_urls = picture_urls , period = period , unknownFields = unknownFields ) } override fun redact ( value : Dinosaur ): Dinosaur = value . copy ( unknownFields = ByteString . EMPTY ) } } } Creating and accessing proto models is easy: val stegosaurus = Dinosaur ( name = Stegosaurus , period = Period . JURASSIC ) println ( My favorite dinosaur existed in the ${stegosaurus.period} period. ) Here s how you can modify the object to add extra fields: val stegosaurus = stegosaurus . copy ( picture_urls = listOf ( https://www.flickr.com/photos/tags/Stegosaurus/ ) ) println ( Here are some photos of ${stegosaurus.name}: ${stegosaurus.picture_urls} )","title":"Wire Kotlin"},{"location":"#generating-code-with-wire","text":"Wire s compiler is available via a Maven plugin. Put .proto sources in your project s src/main/proto directory, then use the plugin to generate .java files. The plugin will automatically add the generated Java code to your project s source roots. build plugins plugin groupId com.squareup.wire /groupId artifactId wire-maven-plugin /artifactId version ${project.version} /version executions execution phase generate-sources /phase goals goal generate-sources /goal /goals configuration includes !-- proto package names to generate code for -- include squareup.dinosaurs.* /include include squareup.geology.* /include /includes /configuration /execution /executions /plugin /plugins /build Wire can read .proto files from the local file system and from within .jar files. The compiler can optionally prune your schema to a subset of root types and their transitive dependencies. This is useful when sharing a schema between projects: a Java service and Android app may each use a subset of a larger shared schema. If you don t use Maven, the compiler also has a command line interface. Just substitute wire-compiler-VERSION-jar-with-dependencies.jar with the path to your jar. Download the latest precompiled jar. % java -jar wire-compiler-VERSION-jar-with-dependencies.jar \\ --proto_path=src/main/proto \\ --java_out=out \\ squareup/dinosaurs/dinosaur.proto \\ squareup/geology/period.proto Writing com.squareup.dinosaurs.Dinosaur to out Writing com.squareup.geology.Period to out Supplying the --android flag to the compiler causes Wire messages to implement Parcelable . If you use Proguard, then you need to add keep rules. The simplest option is to tell Proguard not to touch the Wire runtime library and your generated protocol buffers (of course these simple rules will miss opportunities to shrink and optimize the code): -keep class com.squareup.wire.** { *; } -keep class com.yourcompany.yourgeneratedcode.** { *; }","title":"Generating Code With Wire"},{"location":"#get-wire","text":"The wire-runtime package contains runtime support libraries that must be included in applications that use Wire-generated code. With Maven: dependency groupId com.squareup.wire /groupId artifactId wire-runtime /artifactId version 2.2.0 /version /dependency With Gradle: compile com.squareup.wire:wire-runtime:2.2.0","title":"Get Wire"},{"location":"#wire-3-alpha","text":"With Maven: dependency groupId com.squareup.wire /groupId artifactId wire-runtime /artifactId version 3.0.0-rc01 /version /dependency With Gradle: api com.squareup.wire:wire-runtime:3.0.0-rc01 Snapshots of the development version are available in Sonatype s snapshots repository .","title":"Wire 3 Alpha"},{"location":"#unsupported","text":"Wire does not support: Groups - they are skipped when parsing binary input data Wire supports custom options on messages and fields. Other custom options are ignored. Pass --excludes=google.protobuf.* to the compiler to omit options from the generated code.","title":"Unsupported"},{"location":"#further-documentation","text":"See Google s excellent documentation on the structure and syntax of proto schemas.","title":"Further Documentation"},{"location":"changelog/","text":"Change Log Version 3.0.0-rc02 2019-10-01 Kotlin Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin. gRPC Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients. Misc New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don t cache Message s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don t emit proto2 sources for proto3 syntax. Version 3.0.0-rc01 2019-08-02 Compiler + Gradle plugin New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren t working. Fix: Don t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields. Kotlin New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code. gRPC New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs. Misc Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility. Version 3.0.0-alpha03 2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts. Version 3.0.0-alpha02 2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api com.squareup.wire:wire-runtime:3.0.0-alpha02 and if you want to depend on the JVM artifact only, use the following declaration: api com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02 New: Generate RPCs as Single Abstract Methods. New: Add singleMethod Gradle plugin configuration for services. New: Add blockingServices Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly. Version 3.0.0-alpha01 2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val name : String , @field : WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#INT32 ) val id : Int , @field : WireField ( tag = 3 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val email : String ? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message Person , Person . Builder ( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter Person = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there s no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = /routeguide.RouteGuide/GetFeature , requestAdapter = routeguide.Point#ADAPTER , responseAdapter = routeguide.Feature#ADAPTER ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here s an example Gradle configuration: apply plugin: com.squareup.wire wire { // Keeps only Dinosaur#name as the root of the object graph roots squareup.dinosaurs.Dinosaur#name // Keeps all fields, except name , in Dinosaur prunes squareup.dinosaurs.Dinosaur#name // Both roots and prunes in an external file rules rules.txt kotlin { javaInterop true out ${buildDir}/generated/custom } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a with clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit = for syntax declaration. Fix: Don t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique. Version 2.2.0 2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null . Version 2.1.2 2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields. Version 2.1.1 2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated. Version 2.1.0 2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces. Version 2.0.3 2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users). Version 2.0.2 2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code. Version 2.0.1 2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted. Version 2.0.0 2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance! Runtime New ADAPTER constant on most messages gives access to encode decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers. Schema Java Generator The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags. Compiler New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead. Extensions Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required . Version 1.8.0 2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The protoparser library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations. Version 1.7.0 2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields. Version 1.6.1 2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0. Version 1.6.0 2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. UNDEFINED enum value has been removed. Version 1.5.2 2014-09-15 New: UNDEFINED enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line. Version 1.5.1 2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0. Version 1.5.0 2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0. Version 1.4.0 2014-04-22 Replace Wire s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class M messageClass) . Reimplement Wire s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected. Version 1.3.3 2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included. Version 1.3.2 2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values. Version 1.3.1 2014-03-25 New: Automatically add Maven plugin s generated source as a compilation root. Fix: Correct Maven plugin s no arguments flag to work properly. Fix: Support extend declarations nested inside message types. Version 1.3.0 2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions. Version 1.2.0 2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation. Version 1.1.1 2013-10-23 Fix: Correct parsing and emission of multi-line documentation. Version 1.1.0 2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named result , other , or o . Version 1.0.1 2013-08-27 New: Support reading directly from InputStream . New: Add other == this shortcut in generated equals() methods. Version 1.0.0 2013-08-23 Initial version.","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-300-rc02","text":"2019-10-01","title":"Version 3.0.0-rc02"},{"location":"changelog/#kotlin","text":"Fix: Nullify other oneof fields in Builder setters in Kotlin interop. Fix: Use unknownFields in hashCode() . Fix: Remove withoutUnknownFields() from Kotlin.","title":"Kotlin"},{"location":"changelog/#grpc","text":"Update: Total rewrite of the generated interfaces for clients: Introduce two interfaces, GrpcCall for simple RPCs, and GrpcStreamingCall fox duplex ones. Both will provide blocking and suspending API, including a reference to the underlying OkHttp Call object and its timeout. Fix: Send stream cancels from clients.","title":"gRPC"},{"location":"changelog/#misc","text":"New: Changes printing of options and enums: No empty lines between options and fields for enums. Print options on new lines only when more than one. Fix: Don t cache Message s hash code on Native. Fix: Fix handling of map values in FieldBinding . Fix: Fix import fails on windows due to path separator. Fix: Don t emit proto2 sources for proto3 syntax.","title":"Misc"},{"location":"changelog/#version-300-rc01","text":"2019-08-02","title":"Version 3.0.0-rc01"},{"location":"changelog/#compiler-gradle-plugin","text":"New: Support includes on Maven coordinate dependencies. New: Track includes separately for source vs proto paths. New: Follow symlinks when building. New: Change the Gradle plugin to track targets as a list. New: Includes and Excludes for Wire targets. New: Print errors on ambiguous and missing imports. Fix: Fix a bug where protopath Maven resources weren t working. Fix: Don t reuse source dependencies as protopath dependencies. Fix: Fix equals() implementation for messages with no fields.","title":"Compiler + Gradle plugin"},{"location":"changelog/#kotlin_1","text":"New: Move Wire.kt into jvmMain to discourage its use in common Kotlin code. New: Make Message.adapter a val . New: Optimize decode() code for protos with no fields. New: Update supported Native platforms. New: Make Message.unknownFields property non-nullable. New: Make Message.unknownFields a val . Fix: Don t use KClass.simpleName to avoid needing kotlin-reflect dependency. Fix: Use kotlin.UnsupportedOperationException in generated code.","title":"Kotlin"},{"location":"changelog/#grpc_1","text":"New: Introduce MessageSource and MessageSink interfaces in wire-runtime . New: Honor Java package names in Wire gRPC services. New: Make PipeDuplexRequestBody internal. Fix: Workaround for @Generated annotation on Java 9+. Fix: Fix types for blocking APIs.","title":"gRPC"},{"location":"changelog/#misc_1","text":"Fix: Fix deserializing null values in Gson adapter. Fix: Change wire-runtime artifact names to preserve 2.x compatibility.","title":"Misc"},{"location":"changelog/#version-300-alpha03","text":"2019-06-22 Similar to alpha02, but with proper wire-runtime multiplatform artifacts.","title":"Version 3.0.0-alpha03"},{"location":"changelog/#version-300-alpha02","text":"2019-06-21 New: Experimental multiplatform runtime. Starting with this version, wire-runtime is published as a multiplatform Kotlin artifact. While the JVM artifact is binary- and behavior-compatible with 3.0.0-alpha01, artifacts for other platforms may not work correctly at this point. The artifact name for the JVM artifact has been changed to wire-runtime-jvm : now, in order to depend on the multiplatform runtime, use the following Gradle dependency declaration: api com.squareup.wire:wire-runtime:3.0.0-alpha02 and if you want to depend on the JVM artifact only, use the following declaration: api com.squareup.wire:wire-runtime-jvm:3.0.0-alpha02 New: Generate RPCs as Single Abstract Methods. New: Add singleMethod Gradle plugin configuration for services. New: Add blockingServices Gradle plugin configuration for services. New: Support packageless services code generation. New: Remove sealed classes-based oneof implementation. New: Don t generate a Builder for non-interop Kotlin messages. Fix: Kotlin Generator correctly generates code for Protobuf services. Fix: Improved formatting of generated Kotlin code. Fix: Generate correct adapter names for WireField annotation. Fix: Generate labels for WireField annotation. Fix: Wrap oneof error message properly.","title":"Version 3.0.0-alpha02"},{"location":"changelog/#version-300-alpha01","text":"2019-03-14 New: Kotlin Generator Wire 3 can generate Kotlin data classes. To enable this feature via the command line API, pass in the --kotlin_out parameter that should specify the output directory for the generated *.kt files. Given the following simple proto: message Person { required string name = 1 ; required int32 id = 2 ; optional string email = 3 ; } the generated Kotlin code will look like the following: data class Person ( @field : WireField ( tag = 1 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val name : String , @field : WireField ( tag = 2 , adapter = com.squareup.wire.ProtoAdapter#INT32 ) val id : Int , @field : WireField ( tag = 3 , adapter = com.squareup.wire.ProtoAdapter#STRING ) val email : String ? = null , val unknownFields : ByteString = ByteString . EMPTY ) : Message Person , Person . Builder ( ADAPTER , unknownFields ) { companion object { @JvmField val ADAPTER : ProtoAdapter Person = ... // code omitted for brevity The copy() method of a data class replaces most usages of the builder. If your code relies on the Builder , you can enable full Builder generation by passing the --java_interop parameter to the compiler. New: gRPC support In addition to generating Kotlin code from proto messages, Wire can now generate code for gRPC endpoints. Here s an example schema: service RouteGuide { // A simple RPC. // // Obtains the feature at a given position. // // A feature with an empty name is returned if there s no feature at the given // position. rpc GetFeature ( Point ) returns ( Feature ) {} } The generated code will look like the following (message protos, referenced by the schema, are omitted): interface RouteGuide : Service { @WireRpc ( path = /routeguide.RouteGuide/GetFeature , requestAdapter = routeguide.Point#ADAPTER , responseAdapter = routeguide.Feature#ADAPTER ) suspend fun GetFeature ( request : Point ): Feature } All four gRPC modes are supported: the generated code uses suspendable functions to implement non-blocking asynchronous execution. In streaming modes, ReceiveChannel and SendChannel are used to listen to asynchronous data in a non-blocking fashion. This feature works out of the box in Wire 3 compiler as long as the input file contains a gRPC schema. New: Gradle plugin Here s an example Gradle configuration: apply plugin: com.squareup.wire wire { // Keeps only Dinosaur#name as the root of the object graph roots squareup.dinosaurs.Dinosaur#name // Keeps all fields, except name , in Dinosaur prunes squareup.dinosaurs.Dinosaur#name // Both roots and prunes in an external file rules rules.txt kotlin { javaInterop true out ${buildDir}/generated/custom } } The wire extension introduces the concept of compilation targets, such as kotlin and java , where each target has its own configuration properties. Multiple targets can be supplied, which benefits use cases such as migrating Java protos to Kotlin. New: Decouple the option of using Android annotations for nullability from the option of having messages implement Parcelable. New: Wire Moshi adapter for serializing proto JSON representation using the Moshi library. New: Implement support for custom enum types. New: Generate AndroidX nullability annotations instead of old support library annotations. New: Import JSR 305 and use it to mark nullability of public API. New: Allow inline multiline comments. New: Generate an empty class when a nested message is retained but its parent was pruned. New: Support rendering a ProtoFile to its schema. New: Support hexadecimal numeric literals. New: Allow custom types to be constrained with a with clause. New: Generate a constructor which takes in a Message.Builder instead of all fields separately. New: Add location to the error message about unsupported group elements. New: Permit single files to be used on the proto path. Fix: Emit = for syntax declaration. Fix: Don t crash when a comment has a dollar sign. Fix: Return subclass type instead of abstract parameterized type for newBuilder. Fix: Validate enum namespace in file context are unique.","title":"Version 3.0.0-alpha01"},{"location":"changelog/#version-220","text":"2016-06-17 New: Support for map type in the schema, compiler, and runtime! New: AndroidMessage base class consolidates everything required for supporting Android and will now be used for generating code with --android . New: stream keyword in RPC definitions is now parsed and exposed in the schema. Fix: Nested types which are retained no longer cause their enclosing type to be retained. Instead, non-instantiable empty types will be generated for pruned enclosing types. Fix: Remove per-type Parcelable.Creator classes and instead use a single type which delegates to the message s ProtoAdapter . Fix: Retain information on redacted fields even when options were pruned. Fix: Do not generate code for handling null from list types (and now map types) which are guaranteed to never be null .","title":"Version 2.2.0"},{"location":"changelog/#version-212","text":"2016-04-15 Fix: Gson type adapter now deserializes JSON null literals to empty list for repeated fields.","title":"Version 2.1.2"},{"location":"changelog/#version-211","text":"2016-02-01 New: reserved keyword is now supported and enforced. Fix: Defer reflection-based lookup of enum method until first use to avoid class loading race conditions. Fix: Support single-quoted string literals. Fix: Adjacent string literals are not correctly concatenated.","title":"Version 2.1.1"},{"location":"changelog/#version-210","text":"2016-01-18 Empty lists of packed values were being encoded incorrectly. In Wire 2.0.x our message adapters incorrectly included empty lists for [packed=true] rather than omitting them. This is now fixed. New: Message.encode() to concisely encode a message. New: MessageAdapter.decode(ByteString) to decode a message from a byte string without an intermediate byte array. New: Wire now includes a sample code generation for service interfaces.","title":"Version 2.1.0"},{"location":"changelog/#version-203","text":"2016-01-04 New: ProtoAdapter.get overload which returns an adapter given an instance of a message. New: @Nullable annotations are emitted for optional fields when using --android . Fix: Remove the need for javac to generate synthetic accessor methods in the generated code. This results in smaller code size and less method references (for Android users).","title":"Version 2.0.3"},{"location":"changelog/#version-202","text":"2015-12-14 Fix: Exclude unknown fields when encoding JSON and drop unknown fields when parsing JSON. Fix: Ensure JSON encoding and decoding works in the default generation mode (not just --compact ) by always adding @WireField metadata to message fields. Fix: Update to JavaPoet 1.4 for more accurate generation of valid Java code.","title":"Version 2.0.2"},{"location":"changelog/#version-201","text":"2015-11-12 Fix: Do not emit case statements for aliased enum constant values. The first constant for a value will be returned when deserializing. Fix: Emit @Deprecated annotation on deprecated enum constants. Fix: Correctly prune dependencies of excluded message, enum, or service members. Previously the dependencies of an excluded member were retained despite the member itself being omitted.","title":"Version 2.0.1"},{"location":"changelog/#version-200","text":"2015-10-23 Wire 2 is a backwards-incompatible release. It makes breaking changes to the compiler, runtime, extensions, and generated code. These changes aren\u2019t made lightly as we\u2019ve endured the upgrade in our own projects! We believe the cost of migration is worth the benefits. We\u2019ve created the wire-schema library that models .proto schema definitions. This is a capable library that packs several neat features. You can load a Schema from .proto files located on the local file system, a ZIP or JAR file, or any java.nio.FileSystem like Jimfs . You can prune this schema with includes or excludes, allowing you to reuse .proto definitions with minimal code. And you can decode data directly from a schema: no code generation is necessary! We\u2019ve flattened extensions. Wire 2.0 combines the fields defined directly on messages with fields defined far away in extensions. In the generated code, extension fields look just like every other field! One limitation of this approach is that it\u2019s no longer possible to compile extensions separately from the messages they extend. For this reason we now recommend always generating all Wire code in a single step. We\u2019ve rearranged the runtime. Types related to the protocol buffers format are now prefixed Proto and types related to our implementation are prefixed Wire . To encode and decode messages you must first get an adapter either from the ADAPTER constant or from ProtoAdapter.get() . You no longer need a Wire instance!","title":"Version 2.0.0"},{"location":"changelog/#runtime","text":"New ADAPTER constant on most messages gives access to encode decode values. This replaces the encoding and decoding methods on Wire . Guard against null lists. Code that passes null to builder methods expecting a List used to accept that; now Wire throws a NullPointerException . Similarly list elements must also be non-null. New Message.newBuilder() API. This replaces the previous copy constructor on Builder . New: Message.withoutUnknownFields() strips unknown fields. Fix: Always throw ProtocolException when there are decoding problems. Fix: Stricter checking for oneof fields. Previously it was possible to create instances with multiple values set! Fix: Improve redacting of repeated fields. Fix: ProtoReader now silently unpacks packed values. Fix: ProtoReader doesn\u2019t return groups to callers.","title":"Runtime"},{"location":"changelog/#schema-java-generator","text":"The Java generator is now standalone. Use these APIs programmatically to build plugins without delegating to the command line interface. New: Prune schemas using includes and excludes. The IdentifierSet can be used to configure which types and members are retained and which are pruned. New: Encode and decode values directly from the schema. New: Improved error messages for validation. Fix: Strict imports. Fix: Detect and forbid conflicts on extension tags.","title":"Schema &amp; Java Generator"},{"location":"changelog/#compiler","text":"New: Always use Wire\u2019s bundled descriptor.proto . Previously to define custom options you needed to import a potentially-inconsistent descriptor. New: Emit all types when no .proto files are explicitly specified. New: Generate code for encoding and decoding messages. The previous, reflection-based encoder and decoder are accessible with --compact . New: ServiceFactory has been removed. To generate code for your services, load a schema with wire-schema and then use a library like JavaPoet to generate your own code. The JavaGenerator class can be used to look up Java names of message types. New: Compiler will load all .proto files if none are explicitly specified. New: Load .proto files from ZIP and JAR files. New: The --android flag causes Wire messages to implement Parcelable . New: Support multiple --proto_path arguments New: The --named_files_only flag limits which .proto files yield .java files. This was the default in Wire 1.x. New: The --no_options flag has been deleted. Use --excludes=google.protobuf.* instead.","title":"Compiler"},{"location":"changelog/#extensions","text":"Extensions have been flattened. Fix: Better field resolution for options. Fix: Extension fields must not be required .","title":"Extensions"},{"location":"changelog/#version-180","text":"2015-06-27 New: oneof support! Fix: Correct serialization of repeated unknown fields. Fix: Removed superfluous private modifier on enum constructor. Warning: The protoparser library was updated to version 4.0. This changes the type passed to any ServiceWriter implementations.","title":"Version 1.8.0"},{"location":"changelog/#version-170","text":"2015-03-05 New: Messages implement Serializable . The serialized form follows protobuf encoding, so renaming fields is safe as long as tags are consistent. (Renaming classes is unsafe, however). Note that extension fields are deserialized as unknown fields.","title":"Version 1.7.0"},{"location":"changelog/#version-161","text":"2015-01-16 New: --quiet and --dry-run command-line arguments. Fix: Handle an extension registry with zero or only one item. Okio dependency bumped to 1.2.0.","title":"Version 1.6.1"},{"location":"changelog/#version-160","text":"2014-10-23 Fix: Correctly throw IOException when parsing bad input fails. Fix: Ensure emitted code references to Arrays.asList correctly compiles in some edge cases. UNDEFINED enum value has been removed.","title":"Version 1.6.0"},{"location":"changelog/#version-152","text":"2014-09-15 New: UNDEFINED enum value represents values that the generated code is unable to handle. New: Service writer implementation can now be specified on the command-line.","title":"Version 1.5.2"},{"location":"changelog/#version-151","text":"2014-06-18 New: Generate interface definition for a Service with a partial list of methods. Okio dependency bumped to 1.0.0.","title":"Version 1.5.1"},{"location":"changelog/#version-150","text":"2014-04-22 New: Options on enums and enum values are now supported. New: Options ending with .redacted on fields will omit values from toString . New: Redactor creates copies of messages with redacted fields omitted. Various internal serialization improvements and memory reduction. Okio dependency bumped to 0.9.0.","title":"Version 1.5.0"},{"location":"changelog/#version-140","text":"2014-04-22 Replace Wire s ByteString class with the one from Okio ( https://github.com/square/okio ). This is a breaking API change . Add a new static method Wire.parseFrom(okio.Source input, Class M messageClass) . Reimplement Wire s input handling to use Okio internally. Provide basic support for generating code from service declarations (see README.md). Improve deserialization performance. Fix a bug where no some extension dependencies were not detected.","title":"Version 1.4.0"},{"location":"changelog/#version-133","text":"2014-03-28 New: Support service declarations as roots. The request and response types of their methods will be included.","title":"Version 1.3.3"},{"location":"changelog/#version-132","text":"2014-03-27 Fix: Enum value duplicate check now correctly looks at names instead of values.","title":"Version 1.3.2"},{"location":"changelog/#version-131","text":"2014-03-25 New: Automatically add Maven plugin s generated source as a compilation root. Fix: Correct Maven plugin s no arguments flag to work properly. Fix: Support extend declarations nested inside message types.","title":"Version 1.3.1"},{"location":"changelog/#version-130","text":"2014-03-21 New: Empty repeated fields are now initialized to an empty collection. New: Emit field options. Use --no_options flag to disable. New: @Deprecated is now added to fields and setters on the builder. New: Maven plugin for running the compiler as part of a build. Fix: Treat empty and null repeated fields the same in equals() and hashCode() . Note: This version is not backwards compatible with code generated from previous versions.","title":"Version 1.3.0"},{"location":"changelog/#version-120","text":"2013-11-01 New: --registry_class compiler argument emits a class with a list of extensions suitable for passing to the Wire constructor. Fix: Ensure all trailing whitespace is trimmed on documentation.","title":"Version 1.2.0"},{"location":"changelog/#version-111","text":"2013-10-23 Fix: Correct parsing and emission of multi-line documentation.","title":"Version 1.1.1"},{"location":"changelog/#version-110","text":"2013-10-22 New: Support for message options. New: Check for duplicate field tag numbers. New: Emit Javadoc on messages, enum values, and builder methods. Fix: Emit imports for extension fields and classes outside of package. Fix: Correctly generate sources for protos with the same basename. Fix: Do not generate default constants for message types. Fix: Avoid shadowing fields named result , other , or o .","title":"Version 1.1.0"},{"location":"changelog/#version-101","text":"2013-08-27 New: Support reading directly from InputStream . New: Add other == this shortcut in generated equals() methods.","title":"Version 1.0.1"},{"location":"changelog/#version-100","text":"2013-08-23 Initial version.","title":"Version 1.0.0"},{"location":"code_of_conduct/","text":"Open Source Code of Conduct At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter. Diversity Statement We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities. Reporting Issues If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below. Thanks Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work. Reporting Guide If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Code of Conduct"},{"location":"code_of_conduct/#open-source-code-of-conduct","text":"At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone. This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored. Square\u2019s open source community strives to: Be open : We invite anyone to participate in any aspect of our projects. Our community is open, and any responsibility can be carried by a contributor who demonstrates the required capacity and competence. Be considerate : People use our work, and we depend on the work of others. Consider users and colleagues before taking action. For example, changes to code, infrastructure, policy, and documentation may negatively impact others. Be respectful : We expect people to work together to resolve conflict, assume good intentions, and act with empathy. Do not turn disagreements into personal attacks. Be collaborative : Collaboration reduces redundancy and improves the quality of our work. We strive for transparency within our open source community, and we work closely with upstream developers and others in the free software community to coordinate our efforts. Be pragmatic : Questions are encouraged and should be asked early in the process to avoid problems later. Be thoughtful and considerate when seeking out the appropriate forum for your questions. Those who are asked should be responsive and helpful. Step down considerately : Members of every project come and go. When somebody leaves or disengages from the project, they should make it known and take the proper steps to ensure that others can pick up where they left off. This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.","title":"Open Source Code of Conduct"},{"location":"code_of_conduct/#diversity-statement","text":"We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal. Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong. Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.","title":"Diversity Statement"},{"location":"code_of_conduct/#reporting-issues","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . For more details, please see our Reporting Guidelines below.","title":"Reporting Issues"},{"location":"code_of_conduct/#thanks","text":"Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter , Ubuntu , GDC , and Django communities. We are thankful for their work.","title":"Thanks"},{"location":"code_of_conduct/#reporting-guide","text":"If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com . All reports will be handled with discretion. In your report please include: Your contact information. Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional witnesses, please include them as well. Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly available record (e.g. a mailing list archive or a public IRC logger), please include a link. Any additional information that may be helpful. After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond. Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.","title":"Reporting Guide"},{"location":"contributing/","text":"Contributing Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you ve found a security problem, please follow our bug bounty program. If you ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) . Code Contributions Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge. Committer s Guides Releasing","title":"Contributing"},{"location":"contributing/#contributing","text":"Keeping the project small and stable limits our ability to accept new contributors. We are not seeking new committers at this time, but some small contributions are welcome. If you ve found a security problem, please follow our bug bounty program. If you ve found a bug, please contribute a failing test case so we can study and fix it. Before code can be accepted all contributors must complete our Individual Contributor License Agreement (CLA) .","title":"Contributing"},{"location":"contributing/#code-contributions","text":"Get working code on a personal branch with tests passing before you submit a PR: ./gradlew clean check Please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Contribute code changes through GitHub by forking the repository and sending a pull request. We squash all pull requests on merge.","title":"Code Contributions"},{"location":"contributing/#committers-guides","text":"Releasing","title":"Committer's Guides"},{"location":"releasing/","text":"Releasing Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g \\ gradle.properties sed -i \\ s/\\ com.squareup.wire:\\([^\\:]*\\):[^\\ ]*\\ /\\ com.squareup.wire:\\1:$RELEASE_VERSION\\ /g \\ `find . -name README.md ` ./gradlew clean publish Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am Prepare for release $RELEASE_VERSION. git tag -a parent-$RELEASE_VERSION -m Version $RELEASE_VERSION sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g \\ gradle.properties git commit -am Prepare next development version. git push git push --tags Prerequisites In ~/.gradle/gradle.properties , set the following: SONATYPE_NEXUS_USERNAME - Sonatype username for releasing to com.squareup . SONATYPE_NEXUS_PASSWORD - Sonatype password for releasing to com.squareup .","title":"Releasing"},{"location":"releasing/#releasing","text":"Update CHANGELOG.md . Set versions: export RELEASE_VERSION=X.Y.Z export NEXT_VERSION=X.Y.Z-SNAPSHOT Update, build, and upload: sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$RELEASE_VERSION/g \\ gradle.properties sed -i \\ s/\\ com.squareup.wire:\\([^\\:]*\\):[^\\ ]*\\ /\\ com.squareup.wire:\\1:$RELEASE_VERSION\\ /g \\ `find . -name README.md ` ./gradlew clean publish Visit Sonatype Nexus to promote the artifact. Or drop it if there is a problem! Tag the release, prepare for the next one, and push to GitHub. git commit -am Prepare for release $RELEASE_VERSION. git tag -a parent-$RELEASE_VERSION -m Version $RELEASE_VERSION sed -i \\ s/VERSION_NAME=.*/VERSION_NAME=$NEXT_VERSION/g \\ gradle.properties git commit -am Prepare next development version. git push git push --tags","title":"Releasing"},{"location":"releasing/#prerequisites","text":"In ~/.gradle/gradle.properties , set the following: SONATYPE_NEXUS_USERNAME - Sonatype username for releasing to com.squareup . SONATYPE_NEXUS_PASSWORD - Sonatype password for releasing to com.squareup .","title":"Prerequisites"},{"location":"security/","text":"Security Policy Supported Versions Version Supported 3.x \u2705 2.x 1.x Reporting a Vulnerability Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://hackerone.com/square-open-source","title":"Security"},{"location":"security/#security-policy","text":"","title":"Security Policy"},{"location":"security/#supported-versions","text":"Version Supported 3.x \u2705 2.x 1.x","title":"Supported Versions"},{"location":"security/#reporting-a-vulnerability","text":"Square recognizes the important contributions the security research community can make. We therefore encourage reporting security issues with the code contained in this repository. If you believe you have discovered a security vulnerability, please follow the guidelines at https://hackerone.com/square-open-source","title":"Reporting a Vulnerability"},{"location":"wire_compiler/","text":"Wire Compiler Gradle Plugin Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use. Getting Started The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the standard location the plugin configuration is easy. Just a simple block in build.gradle : plugins { id application id org.jetbrains.kotlin.jvm id com.squareup.wire } wire { kotlin { } } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead. Inputs and Outputs Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir src/main/protos } sourcePath { srcJar lib/pizza-protos.jar } sourcePath { srcJar com.example.pizza:pizza-protos:1.0.0 } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir src/main/protos include com/example/pizza/pizza_delivery.proto include com/example/pizza/pizza.proto } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir src/main/protos include com/example/pizza/** } ... } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ com.example.pizza.* ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ com.example.sales.* , com.example.geo.* ] } java { // Java gets those because they re left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file s package declaration. The option java_package name is not used for Wire configuration. Proto Path for Libraries Large projects may span multiple modules. To support this Wire has a proto path . The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the proto path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir src/main/address-protos } protoPath { srcJar lib/price.jar } protoPath { srcJar com.example:countries:1.0.0 include com/example/geo/country.proto } ... } The source path and proto path are linked together but only types on the source path are generated. Pruning For mobile projects it s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune com.example.store.Store prune com.example.geo.Country ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root com.example.pizza.PizzaDelivery ... } Customizing Output Java Here s an exhaustive Java configuration. Booleans are shown with their non-default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ com.example.pizza.* ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ com.example.sales.* ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out ${buildDir}/custom // True for emitted types to implement android.os.Parcelable. android = true // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = true // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = true } } Kotlin Here s an exhaustive Kotlin configuration. Booleans and enums are shown with their non-default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ com.example.pizza.* ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ com.example.sales.* ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out ${buildDir}/custom // True for emitted types to implement android.os.Parcelable. android = true // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = true // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = blocking // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = server // True for emitted services to implement one interface per RPC. singleMethodServices = true } }","title":"Gradle Plugin"},{"location":"wire_compiler/#wire-compiler-gradle-plugin","text":"Wire has two key components: a compiler that generates Kotlin and Java code at build time, and a runtime library that supports the generated code when your program executes. The compiler is very configurable; this guide explains its features and their use.","title":"Wire Compiler &amp; Gradle Plugin"},{"location":"wire_compiler/#getting-started","text":"The best way to configure and execute the Wire compiler is via our Gradle plugin. It requires Gradle 5.5 or newer. A typical project has .proto files in the standard src/main/proto directory. src/ main/ proto/ com/ example/ pizza/ pizza_delivery.proto pizza.proto sales/ price.proto store.proto geo/ address.proto country.proto kotlin/ com/ example/ pizza/ PizzaApp.kt test/ kotlin/ com/ example/ pizza/ PizzaAppTest.kt build.gradle Because this project uses the standard location the plugin configuration is easy. Just a simple block in build.gradle : plugins { id application id org.jetbrains.kotlin.jvm id com.squareup.wire } wire { kotlin { } } The plugin will read the .proto schema definitions, validate them, link them, and generate Kotlin code. It uses KotlinPoet internally to generate compact and legible source files. Wire will generate files in build/generated/source/wire . It ll also register this directory as a source directory for the project so the generated sources are compiled by the Kotlin compiler. Replace kotlin with java to generate Java sources instead.","title":"Getting Started"},{"location":"wire_compiler/#inputs-and-outputs","text":"Wire can pull source .proto schema definitions from a local directory, a local .jar file, or an external artifact specified with Maven coordinates . wire { sourcePath { srcDir src/main/protos } sourcePath { srcJar lib/pizza-protos.jar } sourcePath { srcJar com.example.pizza:pizza-protos:1.0.0 } ... } If your resource or directory contains more .proto files than you need to compile you can constrain the inputs to specific files: wire { sourcePath { srcDir src/main/protos include com/example/pizza/pizza_delivery.proto include com/example/pizza/pizza.proto } } Wildcards (with two stars) are also accepted: wire { sourcePath { srcDir src/main/protos include com/example/pizza/** } ... } Wire can emit both Java and Kotlin in the same build. Use includes to specify which types are emitted for a target language; subsequent languages will emit what s left over. wire { ... kotlin { // Kotlin emits the matched types only. includes = [ com.example.pizza.* ] } java { // Java gets everything else! } } Note that sources are specified as file system paths (slash delimiter) and targets are specified as Proto type names (dot delimiter). You may also specify targets with excludes. If you have both includes and excludes, excludes take precedence. wire { ... kotlin { // Kotlin emits everything but sales and geo packages. excludes = [ com.example.sales.* , com.example.geo.* ] } java { // Java gets those because they re left over. } } Wire will print a warning if any name in includes or excludes is unused. When configuring Wire you must use the package name from the .proto file s package declaration. The option java_package name is not used for Wire configuration.","title":"Inputs and Outputs"},{"location":"wire_compiler/#proto-path-for-libraries","text":"Large projects may span multiple modules. To support this Wire has a proto path . The .proto schema files on this path are used for linking and validation, but they do not yield files in the generated output. The proto path supports the same inputs as the proto path: directories, .jar files, and Maven coordinates. Similarly, the proto path may be filtered with include . wire { protoPath { srcDir src/main/address-protos } protoPath { srcJar lib/price.jar } protoPath { srcJar com.example:countries:1.0.0 include com/example/geo/country.proto } ... } The source path and proto path are linked together but only types on the source path are generated.","title":"Proto Path for Libraries"},{"location":"wire_compiler/#pruning","text":"For mobile projects it s easy to generate a lot of unnecessary code. For example, a .proto schema might support types for obsolete features. General-purpose code-shrinking tools like R8 and ProGuard have difficulty shrinking Wire-generated sources because the encode() and decode() functions still use them. Instead, Wire offers its own code shrinker to eliminate unwanted declarations early. Use prune to precisely eliminate an unwanted type or member. These will be eliminated along with all references to them. wire { ... prune com.example.store.Store prune com.example.geo.Country ... } Alternately you may prefer to specify what to keep, pruning everything not reachable from that set. wire { ... root com.example.pizza.PizzaDelivery ... }","title":"Pruning"},{"location":"wire_compiler/#customizing-output","text":"","title":"Customizing Output"},{"location":"wire_compiler/#java","text":"Here s an exhaustive Java configuration. Booleans are shown with their non-default behavior. wire { java { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ com.example.pizza.* ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ com.example.sales.* ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out ${buildDir}/custom // True for emitted types to implement android.os.Parcelable. android = true // True to enable the androidx.annotation.Nullable annotation where applicable. androidAnnotations = true // True to emit code that uses reflection for reading, writing, and toString // methods which are normally implemented with generated code. compact = true } }","title":"Java"},{"location":"wire_compiler/#kotlin","text":"Here s an exhaustive Kotlin configuration. Booleans and enums are shown with their non-default behavior. wire { kotlin { // Proto types to include generated sources for. Types listed here will be // generated for this/ target and not for subsequent targets in the task. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. includes = [ com.example.pizza.* ] // Proto types to excluded generated sources for. Types listed here will not // be generated for this target. // // This list should contain package names (suffixed with `.*`) and type names // only. It should not contain member names. excludes = [ com.example.sales.* ] // True if types emitted for this target should not also be emitted for other // targets. Use this to cause multiple outputs to be emitted for the same input // type. exclusive = false // Directory to emit to. out ${buildDir}/custom // True for emitted types to implement android.os.Parcelable. android = true // True for emitted types to implement APIs for easier migration from the Java // target. javaInterop = true // `suspending` to generate coroutines APIs that require a Kotlin coroutines context. // `blocking` to generate blocking APIs callable by Java and Kotlin. rpcCallStyle = blocking // `client` to generate interfaces best suited to sending outbound calls. // `server` to generate interfaces best suited to receiving inbound calls. rpcRole = server // True for emitted services to implement one interface per RPC. singleMethodServices = true } }","title":"Kotlin"},{"location":"3.x/wire-grpc-client/","text":"wire-grpc-client Packages Name Summary com.squareup.wire Index All Types","title":"Home"},{"location":"3.x/wire-grpc-client/#packages","text":"Name Summary com.squareup.wire","title":"Packages"},{"location":"3.x/wire-grpc-client/#index","text":"All Types","title":"Index"},{"location":"3.x/wire-grpc-client/alltypes/","text":"All Types Name Summary com.squareup.wire.GrpcCall A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. com.squareup.wire.GrpcClient com.squareup.wire.GrpcStreamingCall A single streaming call to a remote server. This class handles three streaming call types:","title":"Home"},{"location":"3.x/wire-grpc-client/alltypes/#all-types","text":"Name Summary com.squareup.wire.GrpcCall A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. com.squareup.wire.GrpcClient com.squareup.wire.GrpcStreamingCall A single streaming call to a remote server. This class handles three streaming call types:","title":"All Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/","text":"wire-grpc-client / com.squareup.wire Package com.squareup.wire Types Name Summary GrpcCall interface GrpcCall S : Any , R : Any A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. GrpcClient class GrpcClient GrpcStreamingCall interface GrpcStreamingCall S : Any , R : Any A single streaming call to a remote server. This class handles three streaming call types:","title":"wire-grpc-client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-grpc-client/com.squareup.wire/#types","text":"Name Summary GrpcCall interface GrpcCall S : Any , R : Any A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. GrpcClient class GrpcClient GrpcStreamingCall interface GrpcStreamingCall S : Any , R : Any A single streaming call to a remote server. This class handles three streaming call types:","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/","text":"wire-grpc-client / com.squareup.wire / GrpcCall GrpcCall interface GrpcCall S : Any , R : Any A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Types Name Summary Callback interface Callback S : Any , R : Any Properties Name Summary timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled. Functions Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue abstract fun enqueue(request: S , callback: Callback S , R ): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client s dispatcher thread when the call completes. execute abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Home"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#grpccall","text":"interface GrpcCall S : Any , R : Any A single call to a remote server. This call sends a single request value and receives a single response value. A gRPC call cannot be executed twice. gRPC calls can be suspending , blocking , or asynchronous . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#types","text":"Name Summary Callback interface Callback S : Any , R : Any","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#properties","text":"Name Summary timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. enqueue abstract fun enqueue(request: S , callback: Callback S , R ): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client s dispatcher thread when the call completes. execute abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received. executeBlocking abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / cancel cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/cancel/#cancel","text":"abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / clone clone abstract fun clone(): GrpcCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/clone/#clone","text":"abstract fun clone(): GrpcCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / enqueue enqueue abstract fun enqueue(request: S , callback: Callback S , R ): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client s dispatcher thread when the call completes.","title":"Enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/enqueue/#enqueue","text":"abstract fun enqueue(request: S , callback: Callback S , R ): Unit Enqueues this call for asynchronous execution. The callback will be invoked on the client s dispatcher thread when the call completes.","title":"enqueue"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / executeBlocking executeBlocking abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute-blocking/#executeblocking","text":"abstract fun executeBlocking(request: S ): R Invokes the call immediately and blocks until its response is received.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / execute execute abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received.","title":"Execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/execute/#execute","text":"abstract suspend fun execute(request: S ): R Invokes the call immediately and suspends until its response is received.","title":"execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / isCanceled isCanceled abstract fun isCanceled(): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-canceled/#iscanceled","text":"abstract fun isCanceled(): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / isExecuted isExecuted abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/is-executed/#isexecuted","text":"abstract fun isExecuted(): Boolean Returns true if execute , executeBlocking , or enqueue was called. It is an error to execute or enqueue a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / timeout timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/timeout/#timeout","text":"abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled.","title":"timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback Callback interface Callback S : Any , R : Any Functions Name Summary onFailure abstract fun onFailure(call: GrpcCall S , R , exception: IOException ): Unit onSuccess abstract fun onSuccess(call: GrpcCall S , R , response: R ): Unit","title":"Home"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#callback","text":"interface Callback S : Any , R : Any","title":"Callback"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/#functions","text":"Name Summary onFailure abstract fun onFailure(call: GrpcCall S , R , exception: IOException ): Unit onSuccess abstract fun onSuccess(call: GrpcCall S , R , response: R ): Unit","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onFailure onFailure abstract fun onFailure(call: GrpcCall S , R , exception: IOException ): Unit","title":"On failure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-failure/#onfailure","text":"abstract fun onFailure(call: GrpcCall S , R , exception: IOException ): Unit","title":"onFailure"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/","text":"wire-grpc-client / com.squareup.wire / GrpcCall / Callback / onSuccess onSuccess abstract fun onSuccess(call: GrpcCall S , R , response: R ): Unit","title":"On success"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-call/-callback/on-success/#onsuccess","text":"abstract fun onSuccess(call: GrpcCall S , R , response: R ): Unit","title":"onSuccess"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/","text":"wire-grpc-client / com.squareup.wire / GrpcClient GrpcClient class GrpcClient Types Name Summary Builder class Builder Functions Name Summary create fun T : Service create(service: KClass T ): T","title":"Home"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#grpcclient","text":"class GrpcClient","title":"GrpcClient"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/#functions","text":"Name Summary create fun T : Service create(service: KClass T ): T","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / create create fun T : Service create(service: KClass T ): T","title":"Create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/create/#create","text":"fun T : Service create(service: KClass T ): T","title":"create"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder Builder class Builder Constructors Name Summary init Builder() Functions Name Summary baseUrl fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: HttpUrl): Builder build fun build(): GrpcClient client fun client(client: OkHttpClient): Builder","title":"Home"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#constructors","text":"Name Summary init Builder()","title":"Constructors"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/#functions","text":"Name Summary baseUrl fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: HttpUrl): Builder build fun build(): GrpcClient client fun client(client: OkHttpClient): Builder","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-init-/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / init init Builder()","title":" init "},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/-init-/#init","text":"Builder()","title":"&lt;init&gt;"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / baseUrl baseUrl fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: HttpUrl): Builder","title":"Base url"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/base-url/#baseurl","text":"fun baseUrl(baseUrl: String ): Builder fun baseUrl(url: HttpUrl): Builder","title":"baseUrl"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / build build fun build(): GrpcClient","title":"Build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/build/#build","text":"fun build(): GrpcClient","title":"build"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/","text":"wire-grpc-client / com.squareup.wire / GrpcClient / Builder / client client fun client(client: OkHttpClient): Builder","title":"Client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-client/-builder/client/#client","text":"fun client(client: OkHttpClient): Builder","title":"client"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall GrpcStreamingCall interface GrpcStreamingCall S : Any , R : Any A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same. Properties Name Summary timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout. Functions Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcStreamingCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. execute abstract fun execute(): Pair SendChannel S , ReceiveChannel R Enqueues this call for execution and returns channels to send and receive the call s messages. This uses the Dispatchers.IO to transmit outbound messages. executeBlocking abstract fun executeBlocking(): Pair MessageSink S , MessageSource R Enqueues this call for execution and returns streams to send and receive the call s messages. Reads and writes on the returned streams are blocking. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute or executeBlocking was called. It is an error to execute a call more than once.","title":"Home"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#grpcstreamingcall","text":"interface GrpcStreamingCall S : Any , R : Any A single streaming call to a remote server. This class handles three streaming call types: Single request, streaming response. The send channel or message sink accept exactly one message. The receive channel or message source produce zero or more messages. The outbound request message is sent before any inbound response messages. Streaming request, single response. The send channel or message sink accept zero or more messages. The receive channel or message source produce exactly one message. All outbound request messages are sent before the inbound response message. Streaming request, streaming response. The send channel or message sink accept zero or more messages, and the receive channel or message source produce any number of messages. Unlike the above two types, you are free to interleave request and response messages. A gRPC call cannot be executed twice. gRPC calls can be suspending or blocking . Use whichever mechanism works at your call site: the bytes transmitted on the network are the same.","title":"GrpcStreamingCall"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#properties","text":"Name Summary timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Properties"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally. clone abstract fun clone(): GrpcStreamingCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been. execute abstract fun execute(): Pair SendChannel S , ReceiveChannel R Enqueues this call for execution and returns channels to send and receive the call s messages. This uses the Dispatchers.IO to transmit outbound messages. executeBlocking abstract fun executeBlocking(): Pair MessageSink S , MessageSource R Enqueues this call for execution and returns streams to send and receive the call s messages. Reads and writes on the returned streams are blocking. isCanceled abstract fun isCanceled(): Boolean True if cancel was called. isExecuted abstract fun isExecuted(): Boolean Returns true if execute or executeBlocking was called. It is an error to execute a call more than once.","title":"Functions"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / cancel cancel abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"Cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/cancel/#cancel","text":"abstract fun cancel(): Unit Attempts to cancel the call. This function is safe to call concurrently with execution. When canceled, execution fails with an immediate IOException rather than waiting to complete normally.","title":"cancel"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / clone clone abstract fun clone(): GrpcStreamingCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"Clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/clone/#clone","text":"abstract fun clone(): GrpcStreamingCall S , R Create a new, identical gRPC call to this one which can be enqueued or executed even if this call has already been.","title":"clone"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / executeBlocking executeBlocking abstract fun executeBlocking(): Pair MessageSink S , MessageSource R Enqueues this call for execution and returns streams to send and receive the call s messages. Reads and writes on the returned streams are blocking.","title":"Execute blocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute-blocking/#executeblocking","text":"abstract fun executeBlocking(): Pair MessageSink S , MessageSource R Enqueues this call for execution and returns streams to send and receive the call s messages. Reads and writes on the returned streams are blocking.","title":"executeBlocking"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / execute execute abstract fun execute(): Pair SendChannel S , ReceiveChannel R Enqueues this call for execution and returns channels to send and receive the call s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"Execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/execute/#execute","text":"abstract fun execute(): Pair SendChannel S , ReceiveChannel R Enqueues this call for execution and returns channels to send and receive the call s messages. This uses the Dispatchers.IO to transmit outbound messages.","title":"execute"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isCanceled isCanceled abstract fun isCanceled(): Boolean True if cancel was called.","title":"Is canceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-canceled/#iscanceled","text":"abstract fun isCanceled(): Boolean True if cancel was called.","title":"isCanceled"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / isExecuted isExecuted abstract fun isExecuted(): Boolean Returns true if execute or executeBlocking was called. It is an error to execute a call more than once.","title":"Is executed"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/is-executed/#isexecuted","text":"abstract fun isExecuted(): Boolean Returns true if execute or executeBlocking was called. It is an error to execute a call more than once.","title":"isExecuted"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/","text":"wire-grpc-client / com.squareup.wire / GrpcStreamingCall / timeout timeout abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"Timeout"},{"location":"3.x/wire-grpc-client/com.squareup.wire/-grpc-streaming-call/timeout/#timeout","text":"abstract val timeout: Timeout Configures how long the call can take to complete before it is automatically canceled. The timeout applies to the full set of messages transmitted. For long-running streams you must configure a sufficiently long timeout.","title":"timeout"},{"location":"3.x/wire-moshi-adapter/","text":"wire-moshi-adapter Packages Name Summary com.squareup.wire Index All Types","title":"Home"},{"location":"3.x/wire-moshi-adapter/#packages","text":"Name Summary com.squareup.wire","title":"Packages"},{"location":"3.x/wire-moshi-adapter/#index","text":"All Types","title":"Index"},{"location":"3.x/wire-moshi-adapter/alltypes/","text":"All Types Name Summary com.squareup.wire.WireJsonAdapterFactory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Home"},{"location":"3.x/wire-moshi-adapter/alltypes/#all-types","text":"Name Summary com.squareup.wire.WireJsonAdapterFactory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"All Types"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/","text":"wire-moshi-adapter / com.squareup.wire Package com.squareup.wire Types Name Summary WireJsonAdapterFactory class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"wire-moshi-adapter"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/#types","text":"Name Summary WireJsonAdapterFactory class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Types"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory WireJsonAdapterFactory class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library. Constructors Name Summary init WireJsonAdapterFactory() A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Functions Name Summary create fun create(type: Type , annotations: Set Annotation , moshi: Moshi): JsonAdapter * ?","title":"Home"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#wirejsonadapterfactory","text":"class WireJsonAdapterFactory : Factory A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library.","title":"WireJsonAdapterFactory"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#constructors","text":"Name Summary init WireJsonAdapterFactory() A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library.","title":"Constructors"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/#functions","text":"Name Summary create fun create(type: Type , annotations: Set Annotation , moshi: Moshi): JsonAdapter * ?","title":"Functions"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-init-/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / init init WireJsonAdapterFactory() A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library.","title":" init "},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/-init-/#init","text":"WireJsonAdapterFactory() A JsonAdapter.Factory that allows Wire messages to be serialized and deserialized using the Moshi Json library. Moshi moshi = new Moshi.Builder() .add(new WireJsonAdapterFactory()) .build(); The resulting Moshi instance will be able to serialize and deserialize Wire Message types, including extensions. It ignores unknown field values. The JSON encoding is intended to be compatible with the protobuf-java-format library.","title":"&lt;init&gt;"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/","text":"wire-moshi-adapter / com.squareup.wire / WireJsonAdapterFactory / create create fun create(type: Type , annotations: Set Annotation , moshi: Moshi): JsonAdapter * ?","title":"Create"},{"location":"3.x/wire-moshi-adapter/com.squareup.wire/-wire-json-adapter-factory/create/#create","text":"fun create(type: Type , annotations: Set Annotation , moshi: Moshi): JsonAdapter * ?","title":"create"},{"location":"3.x/wire-runtime/","text":"wire-runtime Packages Name Summary com.squareup.wire Index All Types","title":"Home"},{"location":"3.x/wire-runtime/#packages","text":"Name Summary com.squareup.wire","title":"Packages"},{"location":"3.x/wire-runtime/#index","text":"All Types","title":"Index"},{"location":"3.x/wire-runtime/alltypes/","text":"All Types Name Summary com.squareup.wire.AndroidMessage An Android-specific Message which adds support for Parcelable . com.squareup.wire.EnumAdapter An abstract ProtoAdapter that converts values of an enum to and from integers. com.squareup.wire.FieldEncoding com.squareup.wire.Message A protocol buffer message. com.squareup.wire.MessageSink A writable stream of messages. com.squareup.wire.MessageSource A readable stream of messages. com.squareup.wire.ProtoAdapter com.squareup.wire.ProtoReader Reads and decodes protocol message fields. com.squareup.wire.ProtoWriter Utilities for encoding and writing protocol message fields. com.squareup.wire.Service com.squareup.wire.WireEnum Interface for generated Enum values to help serialization and deserialization. com.squareup.wire.WireField Annotates generated Message fields with metadata for serialization and deserialization. com.squareup.wire.WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Home"},{"location":"3.x/wire-runtime/alltypes/#all-types","text":"Name Summary com.squareup.wire.AndroidMessage An Android-specific Message which adds support for Parcelable . com.squareup.wire.EnumAdapter An abstract ProtoAdapter that converts values of an enum to and from integers. com.squareup.wire.FieldEncoding com.squareup.wire.Message A protocol buffer message. com.squareup.wire.MessageSink A writable stream of messages. com.squareup.wire.MessageSource A readable stream of messages. com.squareup.wire.ProtoAdapter com.squareup.wire.ProtoReader Reads and decodes protocol message fields. com.squareup.wire.ProtoWriter Utilities for encoding and writing protocol message fields. com.squareup.wire.Service com.squareup.wire.WireEnum Interface for generated Enum values to help serialization and deserialization. com.squareup.wire.WireField Annotates generated Message fields with metadata for serialization and deserialization. com.squareup.wire.WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"All Types"},{"location":"3.x/wire-runtime/com.squareup.wire/","text":"wire-runtime / com.squareup.wire Package com.squareup.wire Types Name Summary AndroidMessage (JVM) abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B An Android-specific Message which adds support for Parcelable . EnumAdapter (JVM, js, native) abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding enum class FieldEncoding Message (JVM, js, native) abstract expect class Message M : Message M , B , B : Builder M , B A protocol buffer message. MessageSink (JVM, js, native) expect interface MessageSink in T : Any A writable stream of messages. MessageSource (JVM, js, native) expect interface MessageSource out T : Any A readable stream of messages. ProtoAdapter (JVM, js, native) abstract expect class ProtoAdapter E ProtoReader class ProtoReader Reads and decodes protocol message fields. ProtoWriter class ProtoWriter Utilities for encoding and writing protocol message fields. Service interface Service WireEnum interface WireEnum Interface for generated Enum values to help serialization and deserialization. Annotations Name Summary WireField annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. WireRpc annotation class WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . Functions Name Summary get (JVM) fun T get(value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example,","title":"wire-runtime"},{"location":"3.x/wire-runtime/com.squareup.wire/#package-comsquareupwire","text":"","title":"Package com.squareup.wire"},{"location":"3.x/wire-runtime/com.squareup.wire/#types","text":"Name Summary AndroidMessage (JVM) abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B An Android-specific Message which adds support for Parcelable . EnumAdapter (JVM, js, native) abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E An abstract ProtoAdapter that converts values of an enum to and from integers. FieldEncoding enum class FieldEncoding Message (JVM, js, native) abstract expect class Message M : Message M , B , B : Builder M , B A protocol buffer message. MessageSink (JVM, js, native) expect interface MessageSink in T : Any A writable stream of messages. MessageSource (JVM, js, native) expect interface MessageSource out T : Any A readable stream of messages. ProtoAdapter (JVM, js, native) abstract expect class ProtoAdapter E ProtoReader class ProtoReader Reads and decodes protocol message fields. ProtoWriter class ProtoWriter Utilities for encoding and writing protocol message fields. Service interface Service WireEnum interface WireEnum Interface for generated Enum values to help serialization and deserialization.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/#annotations","text":"Name Summary WireField annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. WireRpc annotation class WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Annotations"},{"location":"3.x/wire-runtime/com.squareup.wire/#functions","text":"Name Summary get (JVM) fun T get(value: T ?, defaultValue: T ): T Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example,","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/","text":"wire-runtime / com.squareup.wire / Service Service interface Service","title":" service"},{"location":"3.x/wire-runtime/com.squareup.wire/-service/#service","text":"interface Service","title":"Service"},{"location":"3.x/wire-runtime/com.squareup.wire/get/","text":"wire-runtime / com.squareup.wire / get get fun T get(value: T ?, defaultValue: T ): T Platform and version requirements: JVM Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = ... MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field f defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field f .","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/get/#get","text":"fun T get(value: T ?, defaultValue: T ): T Platform and version requirements: JVM Returns value if it is not null; defaultValue otherwise. This is used to conveniently return a default value when a value is null. For example, MyProto myProto = ... MyField field = Wire.get(myProto.f, MyProto.f_default); will attempt to retrieve the value of the field f defined by MyProto. If the field is null (i.e., unset), get will return its second argument, which in this case is the default value for the field f .","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/","text":"wire-runtime / com.squareup.wire / AndroidMessage AndroidMessage abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable . Constructors Name Summary init AndroidMessage(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) An Android-specific Message which adds support for Parcelable . Inherited Properties Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter M The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: ERROR CLASS Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields. Functions Name Summary describeContents open fun describeContents(): Int writeToParcel open fun writeToParcel(dest: ERROR CLASS , flags: Int ): Unit Inherited Functions Name Summary encode (JVM) fun encode(): ByteArray Encode this message as a byte[] . fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . newBuilder (JVM, js, native) abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString (JVM, js, native) open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any Companion Object Functions Name Summary newCreator fun E newCreator(adapter: ProtoAdapter E ): ERROR CLASS E Creates a new Parcelable.Creator using adapter for serialization.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#androidmessage","text":"abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":"AndroidMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#constructors","text":"Name Summary init AndroidMessage(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) An Android-specific Message which adds support for Parcelable .","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#inherited-properties","text":"Name Summary adapter (JVM, js, native) val adapter: ProtoAdapter M The ProtoAdapter for encoding and decoding messages of this type. hashCode (JVM, js, native) var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields (JVM, js, native) val unknownFields: ERROR CLASS Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#functions","text":"Name Summary describeContents open fun describeContents(): Int writeToParcel open fun writeToParcel(dest: ERROR CLASS , flags: Int ): Unit","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#inherited-functions","text":"Name Summary encode (JVM) fun encode(): ByteArray Encode this message as a byte[] . fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . newBuilder (JVM, js, native) abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString (JVM, js, native) open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/#companion-object-functions","text":"Name Summary newCreator fun E newCreator(adapter: ProtoAdapter E ): ERROR CLASS E Creates a new Parcelable.Creator using adapter for serialization.","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-init-/","text":"wire-runtime / com.squareup.wire / AndroidMessage / init init protected AndroidMessage(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/-init-/#init","text":"protected AndroidMessage(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) Platform and version requirements: JVM An Android-specific Message which adds support for Parcelable .","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/","text":"wire-runtime / com.squareup.wire / AndroidMessage / describeContents describeContents open fun describeContents(): Int Platform and version requirements: JVM","title":"Describe contents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/describe-contents/#describecontents","text":"open fun describeContents(): Int Platform and version requirements: JVM","title":"describeContents"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/new-creator/","text":"wire-runtime / com.squareup.wire / AndroidMessage / newCreator newCreator fun E newCreator(adapter: ProtoAdapter E ): ERROR CLASS E Platform and version requirements: JVM Creates a new Parcelable.Creator using adapter for serialization.","title":"New creator"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/new-creator/#newcreator","text":"fun E newCreator(adapter: ProtoAdapter E ): ERROR CLASS E Platform and version requirements: JVM Creates a new Parcelable.Creator using adapter for serialization.","title":"newCreator"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/","text":"wire-runtime / com.squareup.wire / AndroidMessage / writeToParcel writeToParcel open fun writeToParcel(dest: ERROR CLASS , flags: Int ): Unit Platform and version requirements: JVM","title":"Write to parcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-android-message/write-to-parcel/#writetoparcel","text":"open fun writeToParcel(dest: ERROR CLASS , flags: Int ): Unit Platform and version requirements: JVM","title":"writeToParcel"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/","text":"wire-runtime / com.squareup.wire / EnumAdapter EnumAdapter abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. Constructors Name Summary init (JVM) EnumAdapter(type: KClass E ) An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class E ) Inherited Properties Name Summary type (JVM, js, native) val type: KClass * ? Functions Name Summary decode open fun decode(reader: ProtoReader ): E Read a non-null value from reader . open actual fun decode(reader: ERROR CLASS ): E encode open fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . open actual fun encode(writer: ERROR CLASS , value: E ): Unit encodedSize open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). fromValue abstract fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. redact open fun redact(value: E ): E Returns the redacted form of value . Inherited Functions Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter List E Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter List E Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Read an encoded message from source . fun decode(stream: InputStream ): E encode (JVM) fun encode(sink: ERROR CLASS , value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#enumadapter","text":"abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers.","title":"EnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#constructors","text":"Name Summary init (JVM) EnumAdapter(type: KClass E ) An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class E )","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inherited-properties","text":"Name Summary type (JVM, js, native) val type: KClass * ?","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#functions","text":"Name Summary decode open fun decode(reader: ProtoReader ): E Read a non-null value from reader . open actual fun decode(reader: ERROR CLASS ): E encode open fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . open actual fun encode(writer: ERROR CLASS , value: E ): Unit encodedSize open fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). fromValue abstract fun fromValue(value: Int ): E ? Converts an integer to an enum. Returns null if there is no corresponding enum. redact open fun redact(value: E ): E Returns the redacted form of value .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/#inherited-functions","text":"Name Summary asPacked (JVM, js, native) fun asPacked(): ProtoAdapter List E Returns an adapter for E but as a packed, repeated value. asRepeated (JVM, js, native) fun asRepeated(): ProtoAdapter List E Returns an adapter for E but as a repeated value. decode (JVM) fun decode(bytes: ByteArray ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Read an encoded message from source . fun decode(stream: InputStream ): E encode (JVM) fun encode(sink: ERROR CLASS , value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit encodedSizeWithTag (JVM, js, native) open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. toString (JVM, js, native) open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-init-/","text":"wire-runtime / com.squareup.wire / EnumAdapter / init init protected EnumAdapter(type: KClass E ) Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class E ) Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/-init-/#init","text":"protected EnumAdapter(type: KClass E ) Platform and version requirements: JVM, js, native An abstract ProtoAdapter that converts values of an enum to and from integers. EnumAdapter(type: Class E ) Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/","text":"wire-runtime / com.squareup.wire / EnumAdapter / decode decode open fun decode(reader: ProtoReader ): E Overrides ProtoAdapter.decode Read a non-null value from reader . open actual fun decode(reader: ERROR CLASS ): E Overrides ProtoAdapter.decode Platform and version requirements: JVM, js, native","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/decode/#decode","text":"open fun decode(reader: ProtoReader ): E Overrides ProtoAdapter.decode Read a non-null value from reader . open actual fun decode(reader: ERROR CLASS ): E Overrides ProtoAdapter.decode Platform and version requirements: JVM, js, native","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/","text":"wire-runtime / com.squareup.wire / EnumAdapter / encode encode open fun encode(writer: ProtoWriter , value: E ): Unit Overrides ProtoAdapter.encode Write non-null value to writer . open actual fun encode(writer: ERROR CLASS , value: E ): Unit Overrides ProtoAdapter.encode Platform and version requirements: JVM, js, native","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encode/#encode","text":"open fun encode(writer: ProtoWriter , value: E ): Unit Overrides ProtoAdapter.encode Write non-null value to writer . open actual fun encode(writer: ERROR CLASS , value: E ): Unit Overrides ProtoAdapter.encode Platform and version requirements: JVM, js, native","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/","text":"wire-runtime / com.squareup.wire / EnumAdapter / encodedSize encodedSize open fun encodedSize(value: E ): Int Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/encoded-size/#encodedsize","text":"open fun encodedSize(value: E ): Int Overrides ProtoAdapter.encodedSize Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/from-value/","text":"wire-runtime / com.squareup.wire / EnumAdapter / fromValue fromValue protected abstract fun fromValue(value: Int ): E ? Platform and version requirements: JVM, js, native Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"From value"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/from-value/#fromvalue","text":"protected abstract fun fromValue(value: Int ): E ? Platform and version requirements: JVM, js, native Converts an integer to an enum. Returns null if there is no corresponding enum.","title":"fromValue"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/","text":"wire-runtime / com.squareup.wire / EnumAdapter / redact redact open fun redact(value: E ): E Overrides ProtoAdapter.redact Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-enum-adapter/redact/#redact","text":"open fun redact(value: E ): E Overrides ProtoAdapter.redact Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/","text":"wire-runtime / com.squareup.wire / FieldEncoding FieldEncoding enum class FieldEncoding Enum Values Name Summary VARINT FIXED64 LENGTH_DELIMITED FIXED32 Functions Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#fieldencoding","text":"enum class FieldEncoding","title":"FieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#enum-values","text":"Name Summary VARINT FIXED64 LENGTH_DELIMITED FIXED32","title":"Enum Values"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/#functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / FieldEncoding / FIXED32 FIXED32 FIXED32 Inherited Functions Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#fixed32","text":"FIXED32","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d32/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / FieldEncoding / FIXED64 FIXED64 FIXED64 Inherited Functions Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#fixed64","text":"FIXED64","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-f-i-x-e-d64/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/","text":"wire-runtime / com.squareup.wire / FieldEncoding / LENGTH_DELIMITED LENGTH_DELIMITED LENGTH_DELIMITED Inherited Functions Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" l e n g t h  d e l i m i t e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#length_delimited","text":"LENGTH_DELIMITED","title":"LENGTH_DELIMITED"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-l-e-n-g-t-h_-d-e-l-i-m-i-t-e-d/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/","text":"wire-runtime / com.squareup.wire / FieldEncoding / VARINT VARINT VARINT Inherited Functions Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":" v a r i n t"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#varint","text":"VARINT","title":"VARINT"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/-v-a-r-i-n-t/#inherited-functions","text":"Name Summary rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Inherited Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/","text":"wire-runtime / com.squareup.wire / FieldEncoding / rawProtoAdapter rawProtoAdapter fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"Raw proto adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-field-encoding/raw-proto-adapter/#rawprotoadapter","text":"fun rawProtoAdapter(): ProtoAdapter * Returns a Wire adapter that reads this field encoding without interpretation. For example, messages are returned as byte strings and enums are returned as integers.","title":"rawProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/","text":"wire-runtime / com.squareup.wire / Message Message abstract expect class Message M : Message M , B , B : Builder M , B Platform and version requirements: JVM, js, native A protocol buffer message. Types Name Summary Builder (JVM, js, native) abstract class Builder M : Message M , B , B : Builder M , B Superclass for protocol buffer message builders. Constructors Name Summary init Message(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) A protocol buffer message. Properties Name Summary adapter val adapter: ProtoAdapter M The ProtoAdapter for encoding and decoding messages of this type. hashCode var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields val unknownFields: ERROR CLASS Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields. Functions Name Summary encode fun encode(sink: ERROR CLASS ): Unit fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . fun encode(): ByteArray Encode this message as a byte[] . newBuilder abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any Inheritors Name Summary AndroidMessage (JVM) abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B An Android-specific Message which adds support for Parcelable .","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#message","text":"abstract expect class Message M : Message M , B , B : Builder M , B Platform and version requirements: JVM, js, native A protocol buffer message.","title":"Message"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#types","text":"Name Summary Builder (JVM, js, native) abstract class Builder M : Message M , B , B : Builder M , B Superclass for protocol buffer message builders.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#constructors","text":"Name Summary init Message(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) A protocol buffer message.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#properties","text":"Name Summary adapter val adapter: ProtoAdapter M The ProtoAdapter for encoding and decoding messages of this type. hashCode var hashCode: Int If non-zero, the hash code of this message. Accessed by generated code. unknownFields val unknownFields: ERROR CLASS Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#functions","text":"Name Summary encode fun encode(sink: ERROR CLASS ): Unit fun encode(stream: OutputStream ): Unit Encode this message and write it to stream . fun encode(): ByteArray Encode this message as a byte[] . newBuilder abstract fun newBuilder(): B Returns a new builder initialized with the data in this message. toString open fun toString(): String withoutUnknownFields (JVM) fun withoutUnknownFields(): M Returns this message with any unknown fields removed. writeReplace (JVM) fun writeReplace(): Any","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/#inheritors","text":"Name Summary AndroidMessage (JVM) abstract class AndroidMessage M : Message M , B , B : Builder M , B : Message M , B An Android-specific Message which adds support for Parcelable .","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-init-/","text":"wire-runtime / com.squareup.wire / Message / init init protected Message(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) Platform and version requirements: JVM, js, native A protocol buffer message.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-init-/#init","text":"protected Message(adapter: ProtoAdapter M , unknownFields: ERROR CLASS ) Platform and version requirements: JVM, js, native A protocol buffer message.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/","text":"wire-runtime / com.squareup.wire / Message / adapter adapter val adapter: ProtoAdapter M Platform and version requirements: JVM, js, native The ProtoAdapter for encoding and decoding messages of this type.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/adapter/#adapter","text":"val adapter: ProtoAdapter M Platform and version requirements: JVM, js, native The ProtoAdapter for encoding and decoding messages of this type.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/","text":"wire-runtime / com.squareup.wire / Message / encode encode fun encode(sink: ERROR CLASS ): Unit fun encode(stream: OutputStream ): Unit Platform and version requirements: JVM Encode this message and write it to stream . fun encode(): ByteArray Platform and version requirements: JVM, js, native Encode this message as a byte[] .","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/encode/#encode","text":"fun encode(sink: ERROR CLASS ): Unit fun encode(stream: OutputStream ): Unit Platform and version requirements: JVM Encode this message and write it to stream . fun encode(): ByteArray Platform and version requirements: JVM, js, native Encode this message as a byte[] .","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/hash-code/","text":"wire-runtime / com.squareup.wire / Message / hashCode hashCode protected var hashCode: Int Platform and version requirements: JVM, js, native If non-zero, the hash code of this message. Accessed by generated code.","title":"Hash code"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/hash-code/#hashcode","text":"protected var hashCode: Int Platform and version requirements: JVM, js, native If non-zero, the hash code of this message. Accessed by generated code.","title":"hashCode"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/","text":"wire-runtime / com.squareup.wire / Message / newBuilder newBuilder abstract fun newBuilder(): B Platform and version requirements: JVM, js, native Returns a new builder initialized with the data in this message.","title":"New builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/new-builder/#newbuilder","text":"abstract fun newBuilder(): B Platform and version requirements: JVM, js, native Returns a new builder initialized with the data in this message.","title":"newBuilder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/","text":"wire-runtime / com.squareup.wire / Message / toString toString open fun toString(): String Platform and version requirements: JVM, js, native","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/to-string/#tostring","text":"open fun toString(): String Platform and version requirements: JVM, js, native","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / unknownFields unknownFields val unknownFields: ERROR CLASS Platform and version requirements: JVM, js, native Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/unknown-fields/#unknownfields","text":"val unknownFields: ERROR CLASS Platform and version requirements: JVM, js, native Returns a byte string containing the proto encoding of this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"unknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / withoutUnknownFields withoutUnknownFields fun withoutUnknownFields(): M Platform and version requirements: JVM Returns this message with any unknown fields removed.","title":"Without unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/without-unknown-fields/#withoutunknownfields","text":"fun withoutUnknownFields(): M Platform and version requirements: JVM Returns this message with any unknown fields removed.","title":"withoutUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/write-replace/","text":"wire-runtime / com.squareup.wire / Message / writeReplace writeReplace protected fun writeReplace(): Any Platform and version requirements: JVM","title":"Write replace"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/write-replace/#writereplace","text":"protected fun writeReplace(): Any Platform and version requirements: JVM","title":"writeReplace"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/","text":"wire-runtime / com.squareup.wire / Message / Builder Builder abstract class Builder M : Message M , B , B : Builder M , B Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders. Constructors Name Summary init Builder() Superclass for protocol buffer message builders. Functions Name Summary addUnknownField (JVM) fun addUnknownField(tag: Int , fieldEncoding: ERROR CLASS , value: Any ?): Builder M , B addUnknownFields (JVM) fun addUnknownFields(unknownFields: ERROR CLASS ): Builder M , B build (JVM) abstract fun build(): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields (JVM) fun buildUnknownFields(): ERROR CLASS Returns a byte string with this message s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields (JVM) fun clearUnknownFields(): Builder M , B","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#builder","text":"abstract class Builder M : Message M , B , B : Builder M , B Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":"Builder"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#constructors","text":"Name Summary init Builder() Superclass for protocol buffer message builders.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/#functions","text":"Name Summary addUnknownField (JVM) fun addUnknownField(tag: Int , fieldEncoding: ERROR CLASS , value: Any ?): Builder M , B addUnknownFields (JVM) fun addUnknownFields(unknownFields: ERROR CLASS ): Builder M , B build (JVM) abstract fun build(): M Returns an immutable Message based on the fields that set in this builder. buildUnknownFields (JVM) fun buildUnknownFields(): ERROR CLASS Returns a byte string with this message s unknown fields. Returns an empty byte string if this message has no unknown fields. clearUnknownFields (JVM) fun clearUnknownFields(): Builder M , B","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-init-/","text":"wire-runtime / com.squareup.wire / Message / Builder / init init protected Builder() Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/-init-/#init","text":"protected Builder() Platform and version requirements: JVM, js, native Superclass for protocol buffer message builders.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/","text":"wire-runtime / com.squareup.wire / Message / Builder / addUnknownField addUnknownField fun addUnknownField(tag: Int , fieldEncoding: ERROR CLASS , value: Any ?): Builder M , B Platform and version requirements: JVM","title":"Add unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-field/#addunknownfield","text":"fun addUnknownField(tag: Int , fieldEncoding: ERROR CLASS , value: Any ?): Builder M , B Platform and version requirements: JVM","title":"addUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / addUnknownFields addUnknownFields fun addUnknownFields(unknownFields: ERROR CLASS ): Builder M , B Platform and version requirements: JVM","title":"Add unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/add-unknown-fields/#addunknownfields","text":"fun addUnknownFields(unknownFields: ERROR CLASS ): Builder M , B Platform and version requirements: JVM","title":"addUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / buildUnknownFields buildUnknownFields fun buildUnknownFields(): ERROR CLASS Platform and version requirements: JVM Returns a byte string with this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"Build unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build-unknown-fields/#buildunknownfields","text":"fun buildUnknownFields(): ERROR CLASS Platform and version requirements: JVM Returns a byte string with this message s unknown fields. Returns an empty byte string if this message has no unknown fields.","title":"buildUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/","text":"wire-runtime / com.squareup.wire / Message / Builder / build build abstract fun build(): M Platform and version requirements: JVM Returns an immutable Message based on the fields that set in this builder.","title":"Build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/build/#build","text":"abstract fun build(): M Platform and version requirements: JVM Returns an immutable Message based on the fields that set in this builder.","title":"build"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/","text":"wire-runtime / com.squareup.wire / Message / Builder / clearUnknownFields clearUnknownFields fun clearUnknownFields(): Builder M , B Platform and version requirements: JVM","title":"Clear unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message/-builder/clear-unknown-fields/#clearunknownfields","text":"fun clearUnknownFields(): Builder M , B Platform and version requirements: JVM","title":"clearUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/","text":"wire-runtime / com.squareup.wire / MessageSink MessageSink expect interface MessageSink in T : Any Platform and version requirements: JVM, js, native A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use. Functions Name Summary cancel abstract fun cancel(): Unit Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. close abstract fun close(): Unit Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. write abstract fun write(message: T ): Unit Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#messagesink","text":"expect interface MessageSink in T : Any Platform and version requirements: JVM, js, native A writable stream of messages. Typical implementations will immediately encode messages and enqueue them for transmission, such as for client-to-server or server-to-client networking. But this interface is not limited to 1-1 networking use cases and implementations may persist, broadcast, validate, or take any other action with the messages. There is no flushing mechanism. Messages are flushed one-by-one as they are written. This minimizes latency at a potential cost of throughput. On its own this offers no guarantees that messages are delivered. For example, a message may accepted by write could be lost due to a network partition or crash. It is the caller s responsibility to confirm delivery and to retransmit as necessary. It is possible for a writer to saturate the transmission channel, such as when a writer writes faster than the corresponding reader can read. In such cases calls to write will block until there is capacity in the outbound channel. You may use this as a basic backpressure mechanism. You should ensure that such backpressure propagates to the originator of outbound messages. Instances of this interface are not safe for concurrent use.","title":"MessageSink"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/#functions","text":"Name Summary cancel abstract fun cancel(): Unit Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. close abstract fun close(): Unit Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream. write abstract fun write(message: T ): Unit Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/","text":"wire-runtime / com.squareup.wire / MessageSink / cancel cancel abstract fun cancel(): Unit Platform and version requirements: JVM, js, native Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled. Exceptions IllegalStateException - if this stream is closed.","title":"Cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#cancel","text":"abstract fun cancel(): Unit Platform and version requirements: JVM, js, native Truncate this stream abnormally. This attempts to signal to readers of this data that it is incomplete. Note that unlike some cancel methods this is not safe for concurrent use. A stream must be closed after it is canceled.","title":"cancel"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/cancel/#exceptions","text":"IllegalStateException - if this stream is closed.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/","text":"wire-runtime / com.squareup.wire / MessageSink / close close abstract fun close(): Unit Platform and version requirements: JVM, js, native Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/close/#close","text":"abstract fun close(): Unit Platform and version requirements: JVM, js, native Terminate the stream and release its resources. If this has not been canceled this signals a normal completion of the stream.","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/","text":"wire-runtime / com.squareup.wire / MessageSink / write write abstract fun write(message: T ): Unit Platform and version requirements: JVM, js, native Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message. Exceptions IllegalStateException - if this stream is closed.","title":"Write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#write","text":"abstract fun write(message: T ): Unit Platform and version requirements: JVM, js, native Encode message to bytes and enqueue the bytes for delivery, waiting if necessary until the delivery channel has capacity for the encoded message.","title":"write"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-sink/write/#exceptions","text":"IllegalStateException - if this stream is closed.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/","text":"wire-runtime / com.squareup.wire / MessageSource MessageSource expect interface MessageSource out T : Any Platform and version requirements: JVM, js, native A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use. Functions Name Summary close abstract fun close(): Unit read abstract fun read(): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#messagesource","text":"expect interface MessageSource out T : Any Platform and version requirements: JVM, js, native A readable stream of messages. Typical implementations will receive messages recently transmitted from a peer, such as for server-to-client or client-to-server networking. But this implementation is not limited to such networking use cases and implementations may load messages from local storage or generate messages on demand. Calls to read will block until a message becomes available. There is no mechanism to limit how long a specific read will wait, though implementations may be configured to fail if they consider a source to be unhealthy. Readers should take care to keep up with the stream of messages. A reader that takes an excessive amount of time to process a message may cause their writer to back up and suffer queueing. Instances of this interface are not safe for concurrent use.","title":"MessageSource"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/#functions","text":"Name Summary close abstract fun close(): Unit read abstract fun read(): T ? Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/","text":"wire-runtime / com.squareup.wire / MessageSource / close close abstract fun close(): Unit Platform and version requirements: JVM, js, native","title":"Close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/close/#close","text":"abstract fun close(): Unit Platform and version requirements: JVM, js, native","title":"close"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/","text":"wire-runtime / com.squareup.wire / MessageSource / read read abstract fun read(): T ? Platform and version requirements: JVM, js, native Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream. Exceptions IOException - if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#read","text":"abstract fun read(): T ? Platform and version requirements: JVM, js, native Read the next length-prefixed message on the stream and return it. Returns null if there are no further messages on this stream.","title":"read"},{"location":"3.x/wire-runtime/com.squareup.wire/-message-source/read/#exceptions","text":"IOException - if the next message cannot be read, or if the stream was abnormally terminated by its producer.","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter ProtoAdapter abstract expect class ProtoAdapter E Platform and version requirements: JVM, js, native Exceptions Name Summary EnumConstantNotFoundException (JVM, js, native) class EnumConstantNotFoundException : IllegalArgumentException Constructors Name Summary init ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass * ?) ProtoAdapter(fieldEncoding: ERROR CLASS , type: Class * ) ProtoAdapter(actual fieldEncoding: ERROR CLASS , actual type: KClass * ?) Properties Name Summary type val type: KClass * ? Functions Name Summary asPacked fun asPacked(): ProtoAdapter List E Returns an adapter for E but as a packed, repeated value. asRepeated fun asRepeated(): ProtoAdapter List E Returns an adapter for E but as a repeated value. decode abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E fun decode(bytes: ERROR CLASS ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Read an encoded message from source . fun decode(stream: InputStream ): E encode abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: ERROR CLASS , value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit encodedSize abstract fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). encodedSizeWithTag open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. redact abstract fun redact(value: E ): E Returns the redacted form of value . toString open fun toString(value: E ): String Returns a human-readable version of the given value . Companion Object Properties Name Summary BOOL val BOOL: ProtoAdapter Boolean BYTES val BYTES: ProtoAdapter ERROR CLASS DOUBLE val DOUBLE: ProtoAdapter Double FIXED32 val FIXED32: ProtoAdapter Int FIXED64 val FIXED64: ProtoAdapter Long FLOAT val FLOAT: ProtoAdapter Float INT32 val INT32: ProtoAdapter Int INT64 val INT64: ProtoAdapter Long SFIXED32 val SFIXED32: ProtoAdapter Int SFIXED64 val SFIXED64: ProtoAdapter Long SINT32 val SINT32: ProtoAdapter Int SINT64 val SINT64: ProtoAdapter Long STRING val STRING: ProtoAdapter String UINT32 val UINT32: ProtoAdapter Int UINT64 val UINT64: ProtoAdapter Long Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON. Companion Object Functions Name Summary get (JVM) fun M : Message *, * get(message: M ): ProtoAdapter M Returns the adapter for the type of Message . fun M get(type: Class M ): ProtoAdapter M Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter * Returns the adapter for a given adapterString . adapterString is specified on a proto message field s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER . newEnumAdapter (JVM) fun E newEnumAdapter(type: Class E ): EnumAdapter E Creates a new proto adapter for type . newMapAdapter fun K, V newMapAdapter(keyAdapter: ProtoAdapter K , valueAdapter: ProtoAdapter V ): ProtoAdapter Map K , V Creates a new proto adapter for a map using keyAdapter and valueAdapter . newMessageAdapter (JVM) fun M : Message M , B , B : Builder M , B newMessageAdapter(type: Class M ): ProtoAdapter M Creates a new proto adapter for type . Inheritors Name Summary EnumAdapter (JVM, js, native) abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E An abstract ProtoAdapter that converts values of an enum to and from integers.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#protoadapter","text":"abstract expect class ProtoAdapter E Platform and version requirements: JVM, js, native","title":"ProtoAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#exceptions","text":"Name Summary EnumConstantNotFoundException (JVM, js, native) class EnumConstantNotFoundException : IllegalArgumentException","title":"Exceptions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#constructors","text":"Name Summary init ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass * ?) ProtoAdapter(fieldEncoding: ERROR CLASS , type: Class * ) ProtoAdapter(actual fieldEncoding: ERROR CLASS , actual type: KClass * ?)","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#properties","text":"Name Summary type val type: KClass * ?","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#functions","text":"Name Summary asPacked fun asPacked(): ProtoAdapter List E Returns an adapter for E but as a packed, repeated value. asRepeated fun asRepeated(): ProtoAdapter List E Returns an adapter for E but as a repeated value. decode abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E fun decode(bytes: ERROR CLASS ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Read an encoded message from source . fun decode(stream: InputStream ): E encode abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: ERROR CLASS , value: E ): Unit Encode value and write it to stream . fun encode(value: E ): ByteArray Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit encodedSize abstract fun encodedSize(value: E ): Int The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one). encodedSizeWithTag open fun encodedSizeWithTag(tag: Int , value: E ?): Int The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null. redact abstract fun redact(value: E ): E Returns the redacted form of value . toString open fun toString(value: E ): String Returns a human-readable version of the given value .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#companion-object-properties","text":"Name Summary BOOL val BOOL: ProtoAdapter Boolean BYTES val BYTES: ProtoAdapter ERROR CLASS DOUBLE val DOUBLE: ProtoAdapter Double FIXED32 val FIXED32: ProtoAdapter Int FIXED64 val FIXED64: ProtoAdapter Long FLOAT val FLOAT: ProtoAdapter Float INT32 val INT32: ProtoAdapter Int INT64 val INT64: ProtoAdapter Long SFIXED32 val SFIXED32: ProtoAdapter Int SFIXED64 val SFIXED64: ProtoAdapter Long SINT32 val SINT32: ProtoAdapter Int SINT64 val SINT64: ProtoAdapter Long STRING val STRING: ProtoAdapter String UINT32 val UINT32: ProtoAdapter Int UINT64 val UINT64: ProtoAdapter Long Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.","title":"Companion Object Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#companion-object-functions","text":"Name Summary get (JVM) fun M : Message *, * get(message: M ): ProtoAdapter M Returns the adapter for the type of Message . fun M get(type: Class M ): ProtoAdapter M Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter * Returns the adapter for a given adapterString . adapterString is specified on a proto message field s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER . newEnumAdapter (JVM) fun E newEnumAdapter(type: Class E ): EnumAdapter E Creates a new proto adapter for type . newMapAdapter fun K, V newMapAdapter(keyAdapter: ProtoAdapter K , valueAdapter: ProtoAdapter V ): ProtoAdapter Map K , V Creates a new proto adapter for a map using keyAdapter and valueAdapter . newMessageAdapter (JVM) fun M : Message M , B , B : Builder M , B newMessageAdapter(type: Class M ): ProtoAdapter M Creates a new proto adapter for type .","title":"Companion Object Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/#inheritors","text":"Name Summary EnumAdapter (JVM, js, native) abstract expect class EnumAdapter E : WireEnum : ProtoAdapter E An abstract ProtoAdapter that converts values of an enum to and from integers.","title":"Inheritors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BOOL BOOL val BOOL: ProtoAdapter Boolean Platform and version requirements: JVM, js, native","title":" b o o l"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-o-o-l/#bool","text":"val BOOL: ProtoAdapter Boolean Platform and version requirements: JVM, js, native","title":"BOOL"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / BYTES BYTES val BYTES: ProtoAdapter ERROR CLASS Platform and version requirements: JVM, js, native","title":" b y t e s"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-b-y-t-e-s/#bytes","text":"val BYTES: ProtoAdapter ERROR CLASS Platform and version requirements: JVM, js, native","title":"BYTES"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / DOUBLE DOUBLE val DOUBLE: ProtoAdapter Double Platform and version requirements: JVM, js, native","title":" d o u b l e"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-d-o-u-b-l-e/#double","text":"val DOUBLE: ProtoAdapter Double Platform and version requirements: JVM, js, native","title":"DOUBLE"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FIXED32 FIXED32 val FIXED32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":" f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d32/#fixed32","text":"val FIXED32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":"FIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FIXED64 FIXED64 val FIXED64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":" f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-i-x-e-d64/#fixed64","text":"val FIXED64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":"FIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / FLOAT FLOAT val FLOAT: ProtoAdapter Float Platform and version requirements: JVM, js, native","title":" f l o a t"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-f-l-o-a-t/#float","text":"val FLOAT: ProtoAdapter Float Platform and version requirements: JVM, js, native","title":"FLOAT"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT32 INT32 val INT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":" i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t32/#int32","text":"val INT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":"INT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / INT64 INT64 val INT64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":" i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-i-n-t64/#int64","text":"val INT64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":"INT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-init-/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / init init ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass * ?) ProtoAdapter(fieldEncoding: ERROR CLASS , type: Class * ) Platform and version requirements: JVM ProtoAdapter(actual fieldEncoding: ERROR CLASS , actual type: KClass * ?) Platform and version requirements: JVM, js, native","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-init-/#init","text":"ProtoAdapter(fieldEncoding: FieldEncoding , type: KClass * ?) ProtoAdapter(fieldEncoding: ERROR CLASS , type: Class * ) Platform and version requirements: JVM ProtoAdapter(actual fieldEncoding: ERROR CLASS , actual type: KClass * ?) Platform and version requirements: JVM, js, native","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SFIXED32 SFIXED32 val SFIXED32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":" s f i x e d32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d32/#sfixed32","text":"val SFIXED32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":"SFIXED32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SFIXED64 SFIXED64 val SFIXED64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":" s f i x e d64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-f-i-x-e-d64/#sfixed64","text":"val SFIXED64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":"SFIXED64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SINT32 SINT32 val SINT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":" s i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t32/#sint32","text":"val SINT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":"SINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / SINT64 SINT64 val SINT64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":" s i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-i-n-t64/#sint64","text":"val SINT64: ProtoAdapter Long Platform and version requirements: JVM, js, native","title":"SINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / STRING STRING val STRING: ProtoAdapter String Platform and version requirements: JVM, js, native","title":" s t r i n g"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-s-t-r-i-n-g/#string","text":"val STRING: ProtoAdapter String Platform and version requirements: JVM, js, native","title":"STRING"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT32 UINT32 val UINT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":" u i n t32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t32/#uint32","text":"val UINT32: ProtoAdapter Int Platform and version requirements: JVM, js, native","title":"UINT32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / UINT64 UINT64 val UINT64: ProtoAdapter Long Platform and version requirements: JVM, js, native Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.","title":" u i n t64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-u-i-n-t64/#uint64","text":"val UINT64: ProtoAdapter Long Platform and version requirements: JVM, js, native Like INT64, but negative longs are interpreted as large positive values, and encoded that way in JSON.","title":"UINT64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / asPacked asPacked fun asPacked(): ProtoAdapter List E Platform and version requirements: JVM, js, native Returns an adapter for E but as a packed, repeated value.","title":"As packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-packed/#aspacked","text":"fun asPacked(): ProtoAdapter List E Platform and version requirements: JVM, js, native Returns an adapter for E but as a packed, repeated value.","title":"asPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / asRepeated asRepeated fun asRepeated(): ProtoAdapter List E Platform and version requirements: JVM, js, native Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller s responsibility to merge them into the final list.","title":"As repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/as-repeated/#asrepeated","text":"fun asRepeated(): ProtoAdapter List E Platform and version requirements: JVM, js, native Returns an adapter for E but as a repeated value. Note: Repeated items are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element lists will be returned and it is the caller s responsibility to merge them into the final list.","title":"asRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / decode decode abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E Platform and version requirements: JVM, js, native fun decode(bytes: ERROR CLASS ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Platform and version requirements: JVM, js, native Read an encoded message from source . fun decode(stream: InputStream ): E Platform and version requirements: JVM","title":"Decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/decode/#decode","text":"abstract fun decode(reader: ProtoReader ): E Read a non-null value from reader . fun decode(bytes: ByteArray ): E Platform and version requirements: JVM, js, native fun decode(bytes: ERROR CLASS ): E Read an encoded message from bytes . fun decode(source: ERROR CLASS ): E Platform and version requirements: JVM, js, native Read an encoded message from source . fun decode(stream: InputStream ): E Platform and version requirements: JVM","title":"decode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodeWithTag encodeWithTag open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit Platform and version requirements: JVM, js, native","title":"Encode with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode-with-tag/#encodewithtag","text":"open fun encodeWithTag(writer: ProtoWriter , tag: Int , value: E ?): Unit Write tag and value to writer . If value is null this does nothing. open actual fun encodeWithTag(writer: ERROR CLASS , tag: Int , value: E ?): Unit Platform and version requirements: JVM, js, native","title":"encodeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encode encode abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: ERROR CLASS , value: E ): Unit Platform and version requirements: JVM, js, native Encode value and write it to stream . fun encode(value: E ): ByteArray Platform and version requirements: JVM, js, native Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit Platform and version requirements: JVM","title":"Encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encode/#encode","text":"abstract fun encode(writer: ProtoWriter , value: E ): Unit Write non-null value to writer . fun encode(sink: ERROR CLASS , value: E ): Unit Platform and version requirements: JVM, js, native Encode value and write it to stream . fun encode(value: E ): ByteArray Platform and version requirements: JVM, js, native Encode value as a byte[] . fun encode(stream: OutputStream , value: E ): Unit Platform and version requirements: JVM","title":"encode"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodedSizeWithTag encodedSizeWithTag open fun encodedSizeWithTag(tag: Int , value: E ?): Int Platform and version requirements: JVM, js, native The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.","title":"Encoded size with tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size-with-tag/#encodedsizewithtag","text":"open fun encodedSizeWithTag(tag: Int , value: E ?): Int Platform and version requirements: JVM, js, native The size of tag and value in the wire format. This size includes the tag, type, length-delimited prefix (should the type require one), and value. Returns 0 if value is null.","title":"encodedSizeWithTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / encodedSize encodedSize abstract fun encodedSize(value: E ): Int Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"Encoded size"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/encoded-size/#encodedsize","text":"abstract fun encodedSize(value: E ): Int Platform and version requirements: JVM, js, native The size of the non-null data value . This does not include the size required for a length-delimited prefix (should the type require one).","title":"encodedSize"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/get/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / get get fun M : Message *, * get(message: M ): ProtoAdapter M Platform and version requirements: JVM Returns the adapter for the type of Message . fun M get(type: Class M ): ProtoAdapter M Platform and version requirements: JVM Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter * Platform and version requirements: JVM Returns the adapter for a given adapterString . adapterString is specified on a proto message field s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER .","title":"Get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/get/#get","text":"fun M : Message *, * get(message: M ): ProtoAdapter M Platform and version requirements: JVM Returns the adapter for the type of Message . fun M get(type: Class M ): ProtoAdapter M Platform and version requirements: JVM Returns the adapter for type . fun get(adapterString: String ): ProtoAdapter * Platform and version requirements: JVM Returns the adapter for a given adapterString . adapterString is specified on a proto message field s WireField annotation in the form com.squareup.wire.protos.person.Person#ADAPTER .","title":"get"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-enum-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newEnumAdapter newEnumAdapter fun E newEnumAdapter(type: Class E ): EnumAdapter E Platform and version requirements: JVM Creates a new proto adapter for type .","title":"New enum adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-enum-adapter/#newenumadapter","text":"fun E newEnumAdapter(type: Class E ): EnumAdapter E Platform and version requirements: JVM Creates a new proto adapter for type .","title":"newEnumAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-map-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newMapAdapter newMapAdapter fun K, V newMapAdapter(keyAdapter: ProtoAdapter K , valueAdapter: ProtoAdapter V ): ProtoAdapter Map K , V Platform and version requirements: JVM, js, native Creates a new proto adapter for a map using keyAdapter and valueAdapter . Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller s responsibility to merge them into the final map.","title":"New map adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-map-adapter/#newmapadapter","text":"fun K, V newMapAdapter(keyAdapter: ProtoAdapter K , valueAdapter: ProtoAdapter V ): ProtoAdapter Map K , V Platform and version requirements: JVM, js, native Creates a new proto adapter for a map using keyAdapter and valueAdapter . Note: Map entries are not required to be encoded sequentially. Thus, when decoding using the returned adapter, only single-element maps will be returned and it is the caller s responsibility to merge them into the final map.","title":"newMapAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-message-adapter/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / newMessageAdapter newMessageAdapter fun M : Message M , B , B : Builder M , B newMessageAdapter(type: Class M ): ProtoAdapter M Platform and version requirements: JVM Creates a new proto adapter for type .","title":"New message adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/new-message-adapter/#newmessageadapter","text":"fun M : Message M , B , B : Builder M , B newMessageAdapter(type: Class M ): ProtoAdapter M Platform and version requirements: JVM Creates a new proto adapter for type .","title":"newMessageAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / redact redact abstract fun redact(value: E ): E Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"Redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/redact/#redact","text":"abstract fun redact(value: E ): E Platform and version requirements: JVM, js, native Returns the redacted form of value .","title":"redact"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / toString toString open fun toString(value: E ): String Platform and version requirements: JVM, js, native Returns a human-readable version of the given value .","title":"To string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/to-string/#tostring","text":"open fun toString(value: E ): String Platform and version requirements: JVM, js, native Returns a human-readable version of the given value .","title":"toString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / type type val type: KClass * ? Platform and version requirements: JVM, js, native","title":"Type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/type/#type","text":"val type: KClass * ? Platform and version requirements: JVM, js, native","title":"type"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException EnumConstantNotFoundException class EnumConstantNotFoundException : IllegalArgumentException Platform and version requirements: JVM, js, native Constructors Name Summary init (JVM) EnumConstantNotFoundException(value: Int , type: KClass * ?) EnumConstantNotFoundException(value: Int , type: Class * ) Properties Name Summary value val value: Int","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#enumconstantnotfoundexception","text":"class EnumConstantNotFoundException : IllegalArgumentException Platform and version requirements: JVM, js, native","title":"EnumConstantNotFoundException"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#constructors","text":"Name Summary init (JVM) EnumConstantNotFoundException(value: Int , type: KClass * ?) EnumConstantNotFoundException(value: Int , type: Class * )","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/#properties","text":"Name Summary value val value: Int","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-init-/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / init init EnumConstantNotFoundException(value: Int , type: KClass * ?) Platform and version requirements: JVM, js, native EnumConstantNotFoundException(value: Int , type: Class * ) Platform and version requirements: JVM","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/-init-/#init","text":"EnumConstantNotFoundException(value: Int , type: KClass * ?) Platform and version requirements: JVM, js, native EnumConstantNotFoundException(value: Int , type: Class * ) Platform and version requirements: JVM","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/","text":"wire-runtime / com.squareup.wire / ProtoAdapter / EnumConstantNotFoundException / value value val value: Int Platform and version requirements: JVM, js, native","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-adapter/-enum-constant-not-found-exception/value/#value","text":"val value: Int Platform and version requirements: JVM, js, native","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/","text":"wire-runtime / com.squareup.wire / ProtoReader ProtoReader class ProtoReader Reads and decodes protocol message fields. Constructors Name Summary init ProtoReader(source: ERROR CLASS ) Reads and decodes protocol message fields. Functions Name Summary beginMessage fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields fun endMessageAndGetUnknownFields(token: Long ): ERROR CLASS End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag fun forEachTag(tagHandler: ( Int ) - Any ): ERROR CLASS Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes fun readBytes(): ERROR CLASS Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream. readFixed64 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream. readString fun readString(): String Reads a string field value from the stream. readUnknownField fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream. skip fun skip(): Unit Skips the current field s value. This is only safe to call immediately following a call to nextTag .","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#protoreader","text":"class ProtoReader Reads and decodes protocol message fields.","title":"ProtoReader"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#constructors","text":"Name Summary init ProtoReader(source: ERROR CLASS ) Reads and decodes protocol message fields.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/#functions","text":"Name Summary beginMessage fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method. endMessageAndGetUnknownFields fun endMessageAndGetUnknownFields(token: Long ): ERROR CLASS End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . forEachTag fun forEachTag(tagHandler: ( Int ) - Any ): ERROR CLASS Reads each tag, handles it, and returns a byte string with the unknown fields. nextTag fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups. peekFieldEncoding fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method. readBytes fun readBytes(): ERROR CLASS Reads a bytes field value from the stream. The length is read from the stream prior to the actual data. readFixed32 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream. readFixed64 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream. readString fun readString(): String Reads a string field value from the stream. readUnknownField fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields. readVarint32 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits. readVarint64 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream. skip fun skip(): Unit Skips the current field s value. This is only safe to call immediately following a call to nextTag .","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-init-/","text":"wire-runtime / com.squareup.wire / ProtoReader / init init ProtoReader(source: ERROR CLASS ) Reads and decodes protocol message fields.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/-init-/#init","text":"ProtoReader(source: ERROR CLASS ) Reads and decodes protocol message fields.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/","text":"wire-runtime / com.squareup.wire / ProtoReader / beginMessage beginMessage fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"Begin message"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/begin-message/#beginmessage","text":"fun beginMessage(): Long Begin a nested message. A call to this method will restrict the reader so that nextTag returns -1 when the message is complete. An accompanying call to endMessage must then occur with the opaque token returned from this method.","title":"beginMessage"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/","text":"wire-runtime / com.squareup.wire / ProtoReader / endMessageAndGetUnknownFields endMessageAndGetUnknownFields fun endMessageAndGetUnknownFields(token: Long ): ERROR CLASS End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage . Parameters token - value returned from the corresponding call to beginMessage .","title":"End message and get unknown fields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#endmessageandgetunknownfields","text":"fun endMessageAndGetUnknownFields(token: Long ): ERROR CLASS End a length-delimited nested message. Calls to this method must be symmetric with calls to beginMessage .","title":"endMessageAndGetUnknownFields"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/end-message-and-get-unknown-fields/#parameters","text":"token - value returned from the corresponding call to beginMessage .","title":"Parameters"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/","text":"wire-runtime / com.squareup.wire / ProtoReader / forEachTag forEachTag inline fun forEachTag(tagHandler: ( Int ) - Any ): ERROR CLASS Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"For each tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/for-each-tag/#foreachtag","text":"inline fun forEachTag(tagHandler: ( Int ) - Any ): ERROR CLASS Reads each tag, handles it, and returns a byte string with the unknown fields.","title":"forEachTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/","text":"wire-runtime / com.squareup.wire / ProtoReader / nextTag nextTag fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"Next tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/next-tag/#nexttag","text":"fun nextTag(): Int Reads and returns the next tag of the message, or -1 if there are no further tags. Use peekFieldEncoding after calling this method to query its encoding. This silently skips groups.","title":"nextTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/","text":"wire-runtime / com.squareup.wire / ProtoReader / peekFieldEncoding peekFieldEncoding fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"Peek field encoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/peek-field-encoding/#peekfieldencoding","text":"fun peekFieldEncoding(): FieldEncoding ? Returns the encoding of the next field value. nextTag must be called before this method.","title":"peekFieldEncoding"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/","text":"wire-runtime / com.squareup.wire / ProtoReader / readBytes readBytes fun readBytes(): ERROR CLASS Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"Read bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-bytes/#readbytes","text":"fun readBytes(): ERROR CLASS Reads a bytes field value from the stream. The length is read from the stream prior to the actual data.","title":"readBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/","text":"wire-runtime / com.squareup.wire / ProtoReader / readFixed32 readFixed32 fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream.","title":"Read fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed32/#readfixed32","text":"fun readFixed32(): Int Reads a 32-bit little-endian integer from the stream.","title":"readFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/","text":"wire-runtime / com.squareup.wire / ProtoReader / readFixed64 readFixed64 fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream.","title":"Read fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-fixed64/#readfixed64","text":"fun readFixed64(): Long Reads a 64-bit little-endian integer from the stream.","title":"readFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/","text":"wire-runtime / com.squareup.wire / ProtoReader / readString readString fun readString(): String Reads a string field value from the stream.","title":"Read string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-string/#readstring","text":"fun readString(): String Reads a string field value from the stream.","title":"readString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/","text":"wire-runtime / com.squareup.wire / ProtoReader / readUnknownField readUnknownField fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"Read unknown field"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-unknown-field/#readunknownfield","text":"fun readUnknownField(tag: Int ): Unit Read an unknown field and store temporarily. Once the entire message is read, call endMessageAndGetUnknownFields to retrieve unknown fields.","title":"readUnknownField"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/","text":"wire-runtime / com.squareup.wire / ProtoReader / readVarint32 readVarint32 fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"Read varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint32/#readvarint32","text":"fun readVarint32(): Int Reads a raw varint from the stream. If larger than 32 bits, discard the upper bits.","title":"readVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/","text":"wire-runtime / com.squareup.wire / ProtoReader / readVarint64 readVarint64 fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream.","title":"Read varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/read-varint64/#readvarint64","text":"fun readVarint64(): Long Reads a raw varint up to 64 bits in length from the stream.","title":"readVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/","text":"wire-runtime / com.squareup.wire / ProtoReader / skip skip fun skip(): Unit Skips the current field s value. This is only safe to call immediately following a call to nextTag .","title":"Skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-reader/skip/#skip","text":"fun skip(): Unit Skips the current field s value. This is only safe to call immediately following a call to nextTag .","title":"skip"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/","text":"wire-runtime / com.squareup.wire / ProtoWriter ProtoWriter class ProtoWriter Utilities for encoding and writing protocol message fields. Constructors Name Summary init ProtoWriter(sink: ERROR CLASS ) Utilities for encoding and writing protocol message fields. Functions Name Summary writeBytes fun writeBytes(value: ERROR CLASS ): Unit writeFixed32 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer. writeFixed64 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer. writeString fun writeString(value: String ): Unit writeTag fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag. writeVarint32 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won t be sign-extended if negative. writeVarint64 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#protowriter","text":"class ProtoWriter Utilities for encoding and writing protocol message fields.","title":"ProtoWriter"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#constructors","text":"Name Summary init ProtoWriter(sink: ERROR CLASS ) Utilities for encoding and writing protocol message fields.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/#functions","text":"Name Summary writeBytes fun writeBytes(value: ERROR CLASS ): Unit writeFixed32 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer. writeFixed64 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer. writeString fun writeString(value: String ): Unit writeTag fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag. writeVarint32 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won t be sign-extended if negative. writeVarint64 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Functions"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-init-/","text":"wire-runtime / com.squareup.wire / ProtoWriter / init init ProtoWriter(sink: ERROR CLASS ) Utilities for encoding and writing protocol message fields.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/-init-/#init","text":"ProtoWriter(sink: ERROR CLASS ) Utilities for encoding and writing protocol message fields.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeBytes writeBytes fun writeBytes(value: ERROR CLASS ): Unit","title":"Write bytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-bytes/#writebytes","text":"fun writeBytes(value: ERROR CLASS ): Unit","title":"writeBytes"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeFixed32 writeFixed32 fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer.","title":"Write fixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed32/#writefixed32","text":"fun writeFixed32(value: Int ): Unit Write a little-endian 32-bit integer.","title":"writeFixed32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeFixed64 writeFixed64 fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer.","title":"Write fixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-fixed64/#writefixed64","text":"fun writeFixed64(value: Long ): Unit Write a little-endian 64-bit integer.","title":"writeFixed64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeString writeString fun writeString(value: String ): Unit","title":"Write string"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-string/#writestring","text":"fun writeString(value: String ): Unit","title":"writeString"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeTag writeTag fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag.","title":"Write tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-tag/#writetag","text":"fun writeTag(fieldNumber: Int , fieldEncoding: FieldEncoding ): Unit Encode and write a tag.","title":"writeTag"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeVarint32 writeVarint32 fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won t be sign-extended if negative.","title":"Write varint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint32/#writevarint32","text":"fun writeVarint32(value: Int ): Unit Encode and write a varint. value is treated as unsigned, so it won t be sign-extended if negative.","title":"writeVarint32"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/","text":"wire-runtime / com.squareup.wire / ProtoWriter / writeVarint64 writeVarint64 fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"Write varint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-proto-writer/write-varint64/#writevarint64","text":"fun writeVarint64(value: Long ): Unit Encode and write a varint.","title":"writeVarint64"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/","text":"wire-runtime / com.squareup.wire / WireEnum WireEnum interface WireEnum Interface for generated Enum values to help serialization and deserialization. Properties Name Summary value abstract val value: Int The tag value of an enum constant.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#wireenum","text":"interface WireEnum Interface for generated Enum values to help serialization and deserialization.","title":"WireEnum"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/#properties","text":"Name Summary value abstract val value: Int The tag value of an enum constant.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/","text":"wire-runtime / com.squareup.wire / WireEnum / value value abstract val value: Int The tag value of an enum constant.","title":"Value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-enum/value/#value","text":"abstract val value: Int The tag value of an enum constant.","title":"value"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/","text":"wire-runtime / com.squareup.wire / WireField WireField @Target([AnnotationTarget.FIELD]) annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization. Types Name Summary Label enum class Label A protocol buffer label. Constructors Name Summary init WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false) Annotates generated Message fields with metadata for serialization and deserialization. Properties Name Summary adapter val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. keyAdapter val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s keys. This only applies to maps. See .adapter for a description of the value format. label val label: Label The field s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , or Label.PACKED . Defaults to Label.OPTIONAL . redacted val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag val tag: Int The tag number used to store the field s value.","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#wirefield","text":"@Target([AnnotationTarget.FIELD]) annotation class WireField Annotates generated Message fields with metadata for serialization and deserialization.","title":"WireField"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#types","text":"Name Summary Label enum class Label A protocol buffer label.","title":"Types"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#constructors","text":"Name Summary init WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false) Annotates generated Message fields with metadata for serialization and deserialization.","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/#properties","text":"Name Summary adapter val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name. keyAdapter val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s keys. This only applies to maps. See .adapter for a description of the value format. label val label: Label The field s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , or Label.PACKED . Defaults to Label.OPTIONAL . redacted val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false. tag val tag: Int The tag number used to store the field s value.","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-init-/","text":"wire-runtime / com.squareup.wire / WireField / init init WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false) Annotates generated Message fields with metadata for serialization and deserialization.","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-init-/#init","text":"WireField(tag: Int , keyAdapter: String = \"\", adapter: String , label: Label = Label.OPTIONAL, redacted: Boolean = false) Annotates generated Message fields with metadata for serialization and deserialization.","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/","text":"wire-runtime / com.squareup.wire / WireField / adapter adapter val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"Adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/adapter/#adapter","text":"val adapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s values. The reference is a string like com.squareup.wire.protos.person.Person#ADAPTER and contains a fully-qualified class name followed by a hash symbol and a field name.","title":"adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/","text":"wire-runtime / com.squareup.wire / WireField / keyAdapter keyAdapter val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s keys. This only applies to maps. See .adapter for a description of the value format.","title":"Key adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/key-adapter/#keyadapter","text":"val keyAdapter: String Reference to the static field that holds a ProtoAdapter that can encode and decode this field s keys. This only applies to maps. See .adapter for a description of the value format.","title":"keyAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/","text":"wire-runtime / com.squareup.wire / WireField / label label val label: Label The field s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , or Label.PACKED . Defaults to Label.OPTIONAL .","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/label/#label","text":"val label: Label The field s protocol buffer label, one of Label.OPTIONAL , Label.REQUIRED , Label.REPEATED , or Label.PACKED . Defaults to Label.OPTIONAL .","title":"label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/","text":"wire-runtime / com.squareup.wire / WireField / redacted redacted val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"Redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/redacted/#redacted","text":"val redacted: Boolean Redacted fields are omitted from toString() to protect sensitive data. Defaults to false.","title":"redacted"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/","text":"wire-runtime / com.squareup.wire / WireField / tag tag val tag: Int The tag number used to store the field s value.","title":"Tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/tag/#tag","text":"val tag: Int The tag number used to store the field s value.","title":"tag"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/","text":"wire-runtime / com.squareup.wire / WireField / Label Label enum class Label A protocol buffer label. Enum Values Name Summary REQUIRED OPTIONAL REPEATED ONE_OF PACKED Implies REPEATED . Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#label","text":"enum class Label A protocol buffer label.","title":"Label"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#enum-values","text":"Name Summary REQUIRED OPTIONAL REPEATED ONE_OF PACKED Implies REPEATED .","title":"Enum Values"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/#properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/","text":"wire-runtime / com.squareup.wire / WireField / Label / ONE_OF ONE_OF ONE_OF Inherited Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" o n e  o f"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#one_of","text":"ONE_OF","title":"ONE_OF"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-n-e_-o-f/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/","text":"wire-runtime / com.squareup.wire / WireField / Label / OPTIONAL OPTIONAL OPTIONAL Inherited Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" o p t i o n a l"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#optional","text":"OPTIONAL","title":"OPTIONAL"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-o-p-t-i-o-n-a-l/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / PACKED PACKED PACKED Implies REPEATED . Inherited Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" p a c k e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#packed","text":"PACKED Implies REPEATED .","title":"PACKED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-p-a-c-k-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / REPEATED REPEATED REPEATED Inherited Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" r e p e a t e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#repeated","text":"REPEATED","title":"REPEATED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-p-e-a-t-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/","text":"wire-runtime / com.squareup.wire / WireField / Label / REQUIRED REQUIRED REQUIRED Inherited Properties Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":" r e q u i r e d"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#required","text":"REQUIRED","title":"REQUIRED"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/-r-e-q-u-i-r-e-d/#inherited-properties","text":"Name Summary isOneOf val isOneOf: Boolean isPacked val isPacked: Boolean isRepeated val isRepeated: Boolean","title":"Inherited Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/","text":"wire-runtime / com.squareup.wire / WireField / Label / isOneOf isOneOf val isOneOf: Boolean","title":"Is one of"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-one-of/#isoneof","text":"val isOneOf: Boolean","title":"isOneOf"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/","text":"wire-runtime / com.squareup.wire / WireField / Label / isPacked isPacked val isPacked: Boolean","title":"Is packed"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-packed/#ispacked","text":"val isPacked: Boolean","title":"isPacked"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/","text":"wire-runtime / com.squareup.wire / WireField / Label / isRepeated isRepeated val isRepeated: Boolean","title":"Is repeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-field/-label/is-repeated/#isrepeated","text":"val isRepeated: Boolean","title":"isRepeated"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/","text":"wire-runtime / com.squareup.wire / WireRpc WireRpc @Target([AnnotationTarget.FUNCTION]) annotation class WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} } Constructors Name Summary init WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . Properties Name Summary path val path: String requestAdapter val requestAdapter: String responseAdapter val responseAdapter: String","title":"Home"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#wirerpc","text":"@Target([AnnotationTarget.FUNCTION]) annotation class WireRpc For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":"WireRpc"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#constructors","text":"Name Summary init WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello .","title":"Constructors"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/#properties","text":"Name Summary path val path: String requestAdapter val requestAdapter: String responseAdapter val responseAdapter: String","title":"Properties"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-init-/","text":"wire-runtime / com.squareup.wire / WireRpc / init init WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":" init "},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/-init-/#init","text":"WireRpc(path: String , requestAdapter: String , responseAdapter: String ) For gRPC actions the path is formatted as / service name / method name . The path of the proto service below is /squareup.helloworld.Greeter/SayHello . package squareup.helloworld; service Greeter { rpc SayHello (HelloRequest) returns (HelloReply) {} }","title":"&lt;init&gt;"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/","text":"wire-runtime / com.squareup.wire / WireRpc / path path val path: String","title":"Path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/path/#path","text":"val path: String","title":"path"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/","text":"wire-runtime / com.squareup.wire / WireRpc / requestAdapter requestAdapter val requestAdapter: String","title":"Request adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/request-adapter/#requestadapter","text":"val requestAdapter: String","title":"requestAdapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/","text":"wire-runtime / com.squareup.wire / WireRpc / responseAdapter responseAdapter val responseAdapter: String","title":"Response adapter"},{"location":"3.x/wire-runtime/com.squareup.wire/-wire-rpc/response-adapter/#responseadapter","text":"val responseAdapter: String","title":"responseAdapter"}]}