// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: one_of.proto
package com.squareup.wire.protos.kotlin

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.TagHandler
import com.squareup.wire.internal.Internal
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.String
import kotlin.jvm.JvmField
import okio.ByteString

data class OneOfMessage(
    val foo: Int? = null,
    val bar: String? = null,
    val baz: String? = null,
    val unknownFields: ByteString = ByteString.EMPTY
) : Message<OneOfMessage, OneOfMessage.Builder>(ADAPTER, unknownFields) {
    init {
        if (Internal.countNonNull(foo, bar, baz) > 1) {
            throw IllegalArgumentException("at most one of foo, bar, baz may be non-null")
        }
    }

    @Deprecated(
            message = "Shouldn't be used in Kotlin",
            level = DeprecationLevel.HIDDEN
    )
    override fun newBuilder(): Builder = Builder(this.copy())

    class Builder(private val message: OneOfMessage) : Message.Builder<OneOfMessage, Builder>() {
        override fun build(): OneOfMessage = message
    }

    companion object {
        @JvmField
        val ADAPTER: ProtoAdapter<OneOfMessage> =
                object : ProtoAdapter<OneOfMessage>(FieldEncoding.LENGTH_DELIMITED, OneOfMessage::class.java) {
            override fun encodedSize(value: OneOfMessage): Int = ProtoAdapter.INT32.encodedSizeWithTag(1, value.foo) +
                ProtoAdapter.STRING.encodedSizeWithTag(3, value.bar) +
                ProtoAdapter.STRING.encodedSizeWithTag(4, value.baz) +
                value.unknownFields.size

            override fun encode(writer: ProtoWriter, value: OneOfMessage) {
                ProtoAdapter.INT32.encodeWithTag(writer, 1, value.foo)
                ProtoAdapter.STRING.encodeWithTag(writer, 3, value.bar)
                ProtoAdapter.STRING.encodeWithTag(writer, 4, value.baz)
                writer.writeBytes(value.unknownFields)
            }

            override fun decode(reader: ProtoReader): OneOfMessage {
                var foo: Int? = null
                var bar: String? = null
                var baz: String? = null
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> foo = ProtoAdapter.INT32.decode(reader)
                        3 -> bar = ProtoAdapter.STRING.decode(reader)
                        4 -> baz = ProtoAdapter.STRING.decode(reader)
                        else -> TagHandler.UNKNOWN_TAG
                    }
                }
                return OneOfMessage(
                    foo = foo,
                    bar = bar,
                    baz = baz,
                    unknownFields = unknownFields
                )
            }
        }
    }
}
