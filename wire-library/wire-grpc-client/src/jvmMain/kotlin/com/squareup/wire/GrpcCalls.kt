/*
 * Copyright 2020 Square Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
@file:JvmName("GrpcCalls")

package com.squareup.wire

import okio.IOException
import okio.Timeout
import java.util.concurrent.atomic.AtomicBoolean

/**
 * Returns a new instance of [GrpcCall] that can be used for a single call to [execute],
 * [executeBlocking], or [enqueue].
 *
 * The returned instance executes [function] synchronously on the calling thread, regardless of
 * which function is called. If [function] throws, the thrown exception will be wrapped in an
 * [IOException].
 *
 * This method is useful when implementing the interfaces that are generated by Wire:
 *
 * ```
 *   override fun GetFeature(): GrpcCall<Point, Feature> {
 *     return GrpcCall<Point, Feature> { request ->
 *       return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)
 *     }
 *   }
 * ```
 *
 * It is succinct when used in an expression function:
 *
 * ```
 *   override fun GetFeature() = GrpcCall<Point, Feature> { request ->
 *     return@GrpcCall lookupNearestFeature(request.latitude, request.longitude)
 *   }
 * ```
 */
fun <S : Any, R : Any> GrpcCall(function: (S) -> R): GrpcCall<S, R> {
  return object : GrpcCall<S, R> {
    private var canceled = AtomicBoolean()
    private var executed = AtomicBoolean()

    override val timeout: Timeout = Timeout.NONE

    override fun cancel() {
      canceled.set(true)
    }

    override fun isCanceled() = canceled.get()

    override fun isExecuted() = executed.get()

    override fun enqueue(request: S, callback: GrpcCall.Callback<S, R>) {
      val response = try {
        executeBlocking(request)
      } catch (exception: IOException) {
        callback.onFailure(this, exception)
        return
      }
      callback.onSuccess(this, response)
    }

    override suspend fun execute(request: S): R = executeBlocking(request)

    override fun executeBlocking(request: S): R {
      require(executed.compareAndSet(false, true)) { "already executed" }
      if (canceled.get()) throw IOException("canceled")
      try {
        return function(request)
      } catch (e: Exception) {
        throw IOException("call failed: $e", e)
      }
    }

    override fun clone() = GrpcCall(function)
  }
}
