// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.MessageUsingMultipleEnums in same_name_enum.proto
import Foundation
import Wire

/**
 * Enum names must be fully qualified in generated Kotlin
 */
public struct MessageUsingMultipleEnums : Equatable, Proto2Codable, Codable {

    public var a: MessageWithStatus.Status?
    public var b: OtherMessageWithStatus.Status?
    public var unknownFields: Data = .init()

    public init(a: MessageWithStatus.Status? = nil, b: OtherMessageWithStatus.Status? = nil) {
        self.a = a
        self.b = b
    }

    public init(from reader: ProtoReader) throws {
        var a: MessageWithStatus.Status? = nil
        var b: OtherMessageWithStatus.Status? = nil

        let unknownFields = try reader.forEachTag { tag in
            switch tag {
                case 1: a = try reader.decode(MessageWithStatus.Status.self)
                case 2: b = try reader.decode(OtherMessageWithStatus.Status.self)
                default: try reader.readUnknownField(tag: tag)
            }
        }

        self.a = a
        self.b = b
        self.unknownFields = unknownFields
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: a)
        try writer.encode(tag: 2, value: b)
        try writer.writeUnknownFields(unknownFields)
    }

    private enum CodingKeys : String, CodingKey {

        case a
        case b

    }

}
