// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.packed_encoding.OuterMessage in packed_encoding.proto
import Foundation
import Wire

public struct OuterMessage {

    public var outer_number_before: Int32?
    public var embedded_message: EmbeddedMessage?
    public var unknownFields: Data = .init()

    public init(outer_number_before: Int32? = nil, embedded_message: EmbeddedMessage? = nil) {
        self.outer_number_before = outer_number_before
        self.embedded_message = embedded_message
    }

}

extension OuterMessage : Equatable {
}

extension OuterMessage : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var outer_number_before: Int32? = nil
        var embedded_message: EmbeddedMessage? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: outer_number_before = try reader.decode(Int32.self)
            case 2: embedded_message = try reader.decode(EmbeddedMessage.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        let unknownFields = try reader.endMessage(token: token)

        self.outer_number_before = outer_number_before
        self.embedded_message = embedded_message
        self.unknownFields = unknownFields
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: outer_number_before)
        try writer.encode(tag: 2, value: embedded_message)
        try writer.writeUnknownFields(unknownFields)
    }
}

extension OuterMessage : Codable {
    public enum CodingKeys : String, CodingKey {

        case outer_number_before
        case embedded_message

    }
}
