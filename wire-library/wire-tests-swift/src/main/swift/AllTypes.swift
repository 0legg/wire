// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.kotlin.alltypes.AllTypes in all_types.proto
import Foundation
import Wire

public struct AllTypes : Equatable {

    public var opt_int32: Int32?
    public var opt_uint32: UInt32?
    public var opt_sint32: Int32?
    public var opt_fixed32: UInt32?
    public var opt_sfixed32: Int32?
    public var opt_int64: Int64?
    public var opt_uint64: UInt64?
    public var opt_sint64: Int64?
    public var opt_fixed64: UInt64?
    public var opt_sfixed64: Int64?
    public var opt_bool: Bool?
    public var opt_float: Float?
    public var opt_double: Double?
    public var opt_string: String?
    public var opt_bytes: Data?
    public var opt_nested_enum: NestedEnum?
    public var opt_nested_message: NestedMessage?
    public var req_int32: Int32
    public var req_uint32: UInt32
    public var req_sint32: Int32
    public var req_fixed32: UInt32
    public var req_sfixed32: Int32
    @JSONString
    public var req_int64: Int64
    @JSONString
    public var req_uint64: UInt64
    @JSONString
    public var req_sint64: Int64
    @JSONString
    public var req_fixed64: UInt64
    @JSONString
    public var req_sfixed64: Int64
    public var req_bool: Bool
    public var req_float: Float
    public var req_double: Double
    public var req_string: String
    public var req_bytes: Data
    public var req_nested_enum: NestedEnum
    public var req_nested_message: NestedMessage
    public var rep_int32: [Int32]
    public var rep_uint32: [UInt32]
    public var rep_sint32: [Int32]
    public var rep_fixed32: [UInt32]
    public var rep_sfixed32: [Int32]
    @JSONString
    public var rep_int64: [Int64]
    @JSONString
    public var rep_uint64: [UInt64]
    @JSONString
    public var rep_sint64: [Int64]
    @JSONString
    public var rep_fixed64: [UInt64]
    @JSONString
    public var rep_sfixed64: [Int64]
    public var rep_bool: [Bool]
    public var rep_float: [Float]
    public var rep_double: [Double]
    public var rep_string: [String]
    public var rep_bytes: [Data]
    public var rep_nested_enum: [NestedEnum]
    public var rep_nested_message: [NestedMessage]
    public var pack_int32: [Int32]
    public var pack_uint32: [UInt32]
    public var pack_sint32: [Int32]
    public var pack_fixed32: [UInt32]
    public var pack_sfixed32: [Int32]
    @JSONString
    public var pack_int64: [Int64]
    @JSONString
    public var pack_uint64: [UInt64]
    @JSONString
    public var pack_sint64: [Int64]
    @JSONString
    public var pack_fixed64: [UInt64]
    @JSONString
    public var pack_sfixed64: [Int64]
    public var pack_bool: [Bool]
    public var pack_float: [Float]
    public var pack_double: [Double]
    public var pack_nested_enum: [NestedEnum]
    public var default_int32: Int32?
    public var default_uint32: UInt32?
    public var default_sint32: Int32?
    public var default_fixed32: UInt32?
    public var default_sfixed32: Int32?
    public var default_int64: Int64?
    public var default_uint64: UInt64?
    public var default_sint64: Int64?
    public var default_fixed64: UInt64?
    public var default_sfixed64: Int64?
    public var default_bool: Bool?
    public var default_float: Float?
    public var default_double: Double?
    public var default_string: String?
    public var default_bytes: Data?
    public var default_nested_enum: NestedEnum?
    public var map_int32_int32: [Int32 : Int32]
    public var map_string_string: [String : String]
    public var map_string_message: [String : NestedMessage]
    public var map_string_enum: [String : NestedEnum]
    public var ext_opt_int32: Int32?
    public var ext_opt_uint32: UInt32?
    public var ext_opt_sint32: Int32?
    public var ext_opt_fixed32: UInt32?
    public var ext_opt_sfixed32: Int32?
    public var ext_opt_int64: Int64?
    public var ext_opt_uint64: UInt64?
    public var ext_opt_sint64: Int64?
    public var ext_opt_fixed64: UInt64?
    public var ext_opt_sfixed64: Int64?
    public var ext_opt_bool: Bool?
    public var ext_opt_float: Float?
    public var ext_opt_double: Double?
    public var ext_opt_string: String?
    public var ext_opt_bytes: Data?
    public var ext_opt_nested_enum: NestedEnum?
    public var ext_opt_nested_message: NestedMessage?
    public var ext_rep_int32: [Int32]
    public var ext_rep_uint32: [UInt32]
    public var ext_rep_sint32: [Int32]
    public var ext_rep_fixed32: [UInt32]
    public var ext_rep_sfixed32: [Int32]
    @JSONString
    public var ext_rep_int64: [Int64]
    @JSONString
    public var ext_rep_uint64: [UInt64]
    @JSONString
    public var ext_rep_sint64: [Int64]
    @JSONString
    public var ext_rep_fixed64: [UInt64]
    @JSONString
    public var ext_rep_sfixed64: [Int64]
    public var ext_rep_bool: [Bool]
    public var ext_rep_float: [Float]
    public var ext_rep_double: [Double]
    public var ext_rep_string: [String]
    public var ext_rep_bytes: [Data]
    public var ext_rep_nested_enum: [NestedEnum]
    public var ext_rep_nested_message: [NestedMessage]
    public var ext_pack_int32: [Int32]
    public var ext_pack_uint32: [UInt32]
    public var ext_pack_sint32: [Int32]
    public var ext_pack_fixed32: [UInt32]
    public var ext_pack_sfixed32: [Int32]
    @JSONString
    public var ext_pack_int64: [Int64]
    @JSONString
    public var ext_pack_uint64: [UInt64]
    @JSONString
    public var ext_pack_sint64: [Int64]
    @JSONString
    public var ext_pack_fixed64: [UInt64]
    @JSONString
    public var ext_pack_sfixed64: [Int64]
    public var ext_pack_bool: [Bool]
    public var ext_pack_float: [Float]
    public var ext_pack_double: [Double]
    public var ext_pack_nested_enum: [NestedEnum]
    public var unknownFields: Data = .init()

    public init(
        opt_int32: Int32? = nil,
        opt_uint32: UInt32? = nil,
        opt_sint32: Int32? = nil,
        opt_fixed32: UInt32? = nil,
        opt_sfixed32: Int32? = nil,
        opt_int64: Int64? = nil,
        opt_uint64: UInt64? = nil,
        opt_sint64: Int64? = nil,
        opt_fixed64: UInt64? = nil,
        opt_sfixed64: Int64? = nil,
        opt_bool: Bool? = nil,
        opt_float: Float? = nil,
        opt_double: Double? = nil,
        opt_string: String? = nil,
        opt_bytes: Data? = nil,
        opt_nested_enum: NestedEnum? = nil,
        opt_nested_message: NestedMessage? = nil,
        req_int32: Int32,
        req_uint32: UInt32,
        req_sint32: Int32,
        req_fixed32: UInt32,
        req_sfixed32: Int32,
        req_int64: Int64,
        req_uint64: UInt64,
        req_sint64: Int64,
        req_fixed64: UInt64,
        req_sfixed64: Int64,
        req_bool: Bool,
        req_float: Float,
        req_double: Double,
        req_string: String,
        req_bytes: Data,
        req_nested_enum: NestedEnum,
        req_nested_message: NestedMessage,
        rep_int32: [Int32] = [],
        rep_uint32: [UInt32] = [],
        rep_sint32: [Int32] = [],
        rep_fixed32: [UInt32] = [],
        rep_sfixed32: [Int32] = [],
        rep_int64: [Int64] = [],
        rep_uint64: [UInt64] = [],
        rep_sint64: [Int64] = [],
        rep_fixed64: [UInt64] = [],
        rep_sfixed64: [Int64] = [],
        rep_bool: [Bool] = [],
        rep_float: [Float] = [],
        rep_double: [Double] = [],
        rep_string: [String] = [],
        rep_bytes: [Data] = [],
        rep_nested_enum: [NestedEnum] = [],
        rep_nested_message: [NestedMessage] = [],
        pack_int32: [Int32] = [],
        pack_uint32: [UInt32] = [],
        pack_sint32: [Int32] = [],
        pack_fixed32: [UInt32] = [],
        pack_sfixed32: [Int32] = [],
        pack_int64: [Int64] = [],
        pack_uint64: [UInt64] = [],
        pack_sint64: [Int64] = [],
        pack_fixed64: [UInt64] = [],
        pack_sfixed64: [Int64] = [],
        pack_bool: [Bool] = [],
        pack_float: [Float] = [],
        pack_double: [Double] = [],
        pack_nested_enum: [NestedEnum] = [],
        default_int32: Int32? = nil,
        default_uint32: UInt32? = nil,
        default_sint32: Int32? = nil,
        default_fixed32: UInt32? = nil,
        default_sfixed32: Int32? = nil,
        default_int64: Int64? = nil,
        default_uint64: UInt64? = nil,
        default_sint64: Int64? = nil,
        default_fixed64: UInt64? = nil,
        default_sfixed64: Int64? = nil,
        default_bool: Bool? = nil,
        default_float: Float? = nil,
        default_double: Double? = nil,
        default_string: String? = nil,
        default_bytes: Data? = nil,
        default_nested_enum: NestedEnum? = nil,
        map_int32_int32: [Int32 : Int32] = [:],
        map_string_string: [String : String] = [:],
        map_string_message: [String : NestedMessage] = [:],
        map_string_enum: [String : NestedEnum] = [:],
        ext_opt_int32: Int32? = nil,
        ext_opt_uint32: UInt32? = nil,
        ext_opt_sint32: Int32? = nil,
        ext_opt_fixed32: UInt32? = nil,
        ext_opt_sfixed32: Int32? = nil,
        ext_opt_int64: Int64? = nil,
        ext_opt_uint64: UInt64? = nil,
        ext_opt_sint64: Int64? = nil,
        ext_opt_fixed64: UInt64? = nil,
        ext_opt_sfixed64: Int64? = nil,
        ext_opt_bool: Bool? = nil,
        ext_opt_float: Float? = nil,
        ext_opt_double: Double? = nil,
        ext_opt_string: String? = nil,
        ext_opt_bytes: Data? = nil,
        ext_opt_nested_enum: NestedEnum? = nil,
        ext_opt_nested_message: NestedMessage? = nil,
        ext_rep_int32: [Int32] = [],
        ext_rep_uint32: [UInt32] = [],
        ext_rep_sint32: [Int32] = [],
        ext_rep_fixed32: [UInt32] = [],
        ext_rep_sfixed32: [Int32] = [],
        ext_rep_int64: [Int64] = [],
        ext_rep_uint64: [UInt64] = [],
        ext_rep_sint64: [Int64] = [],
        ext_rep_fixed64: [UInt64] = [],
        ext_rep_sfixed64: [Int64] = [],
        ext_rep_bool: [Bool] = [],
        ext_rep_float: [Float] = [],
        ext_rep_double: [Double] = [],
        ext_rep_string: [String] = [],
        ext_rep_bytes: [Data] = [],
        ext_rep_nested_enum: [NestedEnum] = [],
        ext_rep_nested_message: [NestedMessage] = [],
        ext_pack_int32: [Int32] = [],
        ext_pack_uint32: [UInt32] = [],
        ext_pack_sint32: [Int32] = [],
        ext_pack_fixed32: [UInt32] = [],
        ext_pack_sfixed32: [Int32] = [],
        ext_pack_int64: [Int64] = [],
        ext_pack_uint64: [UInt64] = [],
        ext_pack_sint64: [Int64] = [],
        ext_pack_fixed64: [UInt64] = [],
        ext_pack_sfixed64: [Int64] = [],
        ext_pack_bool: [Bool] = [],
        ext_pack_float: [Float] = [],
        ext_pack_double: [Double] = [],
        ext_pack_nested_enum: [NestedEnum] = []
    ) {
        self.opt_int32 = opt_int32
        self.opt_uint32 = opt_uint32
        self.opt_sint32 = opt_sint32
        self.opt_fixed32 = opt_fixed32
        self.opt_sfixed32 = opt_sfixed32
        self.opt_int64 = opt_int64
        self.opt_uint64 = opt_uint64
        self.opt_sint64 = opt_sint64
        self.opt_fixed64 = opt_fixed64
        self.opt_sfixed64 = opt_sfixed64
        self.opt_bool = opt_bool
        self.opt_float = opt_float
        self.opt_double = opt_double
        self.opt_string = opt_string
        self.opt_bytes = opt_bytes
        self.opt_nested_enum = opt_nested_enum
        self.opt_nested_message = opt_nested_message
        self.req_int32 = req_int32
        self.req_uint32 = req_uint32
        self.req_sint32 = req_sint32
        self.req_fixed32 = req_fixed32
        self.req_sfixed32 = req_sfixed32
        self.req_int64 = req_int64
        self.req_uint64 = req_uint64
        self.req_sint64 = req_sint64
        self.req_fixed64 = req_fixed64
        self.req_sfixed64 = req_sfixed64
        self.req_bool = req_bool
        self.req_float = req_float
        self.req_double = req_double
        self.req_string = req_string
        self.req_bytes = req_bytes
        self.req_nested_enum = req_nested_enum
        self.req_nested_message = req_nested_message
        self.rep_int32 = rep_int32
        self.rep_uint32 = rep_uint32
        self.rep_sint32 = rep_sint32
        self.rep_fixed32 = rep_fixed32
        self.rep_sfixed32 = rep_sfixed32
        self.rep_int64 = rep_int64
        self.rep_uint64 = rep_uint64
        self.rep_sint64 = rep_sint64
        self.rep_fixed64 = rep_fixed64
        self.rep_sfixed64 = rep_sfixed64
        self.rep_bool = rep_bool
        self.rep_float = rep_float
        self.rep_double = rep_double
        self.rep_string = rep_string
        self.rep_bytes = rep_bytes
        self.rep_nested_enum = rep_nested_enum
        self.rep_nested_message = rep_nested_message
        self.pack_int32 = pack_int32
        self.pack_uint32 = pack_uint32
        self.pack_sint32 = pack_sint32
        self.pack_fixed32 = pack_fixed32
        self.pack_sfixed32 = pack_sfixed32
        self.pack_int64 = pack_int64
        self.pack_uint64 = pack_uint64
        self.pack_sint64 = pack_sint64
        self.pack_fixed64 = pack_fixed64
        self.pack_sfixed64 = pack_sfixed64
        self.pack_bool = pack_bool
        self.pack_float = pack_float
        self.pack_double = pack_double
        self.pack_nested_enum = pack_nested_enum
        self.default_int32 = default_int32
        self.default_uint32 = default_uint32
        self.default_sint32 = default_sint32
        self.default_fixed32 = default_fixed32
        self.default_sfixed32 = default_sfixed32
        self.default_int64 = default_int64
        self.default_uint64 = default_uint64
        self.default_sint64 = default_sint64
        self.default_fixed64 = default_fixed64
        self.default_sfixed64 = default_sfixed64
        self.default_bool = default_bool
        self.default_float = default_float
        self.default_double = default_double
        self.default_string = default_string
        self.default_bytes = default_bytes
        self.default_nested_enum = default_nested_enum
        self.map_int32_int32 = map_int32_int32
        self.map_string_string = map_string_string
        self.map_string_message = map_string_message
        self.map_string_enum = map_string_enum
        self.ext_opt_int32 = ext_opt_int32
        self.ext_opt_uint32 = ext_opt_uint32
        self.ext_opt_sint32 = ext_opt_sint32
        self.ext_opt_fixed32 = ext_opt_fixed32
        self.ext_opt_sfixed32 = ext_opt_sfixed32
        self.ext_opt_int64 = ext_opt_int64
        self.ext_opt_uint64 = ext_opt_uint64
        self.ext_opt_sint64 = ext_opt_sint64
        self.ext_opt_fixed64 = ext_opt_fixed64
        self.ext_opt_sfixed64 = ext_opt_sfixed64
        self.ext_opt_bool = ext_opt_bool
        self.ext_opt_float = ext_opt_float
        self.ext_opt_double = ext_opt_double
        self.ext_opt_string = ext_opt_string
        self.ext_opt_bytes = ext_opt_bytes
        self.ext_opt_nested_enum = ext_opt_nested_enum
        self.ext_opt_nested_message = ext_opt_nested_message
        self.ext_rep_int32 = ext_rep_int32
        self.ext_rep_uint32 = ext_rep_uint32
        self.ext_rep_sint32 = ext_rep_sint32
        self.ext_rep_fixed32 = ext_rep_fixed32
        self.ext_rep_sfixed32 = ext_rep_sfixed32
        self.ext_rep_int64 = ext_rep_int64
        self.ext_rep_uint64 = ext_rep_uint64
        self.ext_rep_sint64 = ext_rep_sint64
        self.ext_rep_fixed64 = ext_rep_fixed64
        self.ext_rep_sfixed64 = ext_rep_sfixed64
        self.ext_rep_bool = ext_rep_bool
        self.ext_rep_float = ext_rep_float
        self.ext_rep_double = ext_rep_double
        self.ext_rep_string = ext_rep_string
        self.ext_rep_bytes = ext_rep_bytes
        self.ext_rep_nested_enum = ext_rep_nested_enum
        self.ext_rep_nested_message = ext_rep_nested_message
        self.ext_pack_int32 = ext_pack_int32
        self.ext_pack_uint32 = ext_pack_uint32
        self.ext_pack_sint32 = ext_pack_sint32
        self.ext_pack_fixed32 = ext_pack_fixed32
        self.ext_pack_sfixed32 = ext_pack_sfixed32
        self.ext_pack_int64 = ext_pack_int64
        self.ext_pack_uint64 = ext_pack_uint64
        self.ext_pack_sint64 = ext_pack_sint64
        self.ext_pack_fixed64 = ext_pack_fixed64
        self.ext_pack_sfixed64 = ext_pack_sfixed64
        self.ext_pack_bool = ext_pack_bool
        self.ext_pack_float = ext_pack_float
        self.ext_pack_double = ext_pack_double
        self.ext_pack_nested_enum = ext_pack_nested_enum
    }

    public enum NestedEnum : UInt32, CaseIterable, Codable {

        case UNKNOWN = 0
        case A = 1

    }

    public struct NestedMessage : Equatable {

        public var a: Int32?
        public var unknownFields: Data = .init()

        public init(a: Int32? = nil) {
            self.a = a
        }

    }

}

extension AllTypes.NestedMessage : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var a: Int32? = nil

        let unknownFields = try reader.forEachTag { tag in
            switch tag {
                case 1: a = try reader.decode(Int32.self)
                default: try reader.readUnknownField(tag: tag)
            }
        }

        self.a = a
        self.unknownFields = unknownFields
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: a)
        try writer.writeUnknownFields(unknownFields)
    }
}

extension AllTypes.NestedMessage : Codable {
    public enum CodingKeys : String, CodingKey {

        case a

    }
}

extension AllTypes : Proto2Codable {
    public init(from reader: ProtoReader) throws {
        var opt_int32: Int32? = nil
        var opt_uint32: UInt32? = nil
        var opt_sint32: Int32? = nil
        var opt_fixed32: UInt32? = nil
        var opt_sfixed32: Int32? = nil
        var opt_int64: Int64? = nil
        var opt_uint64: UInt64? = nil
        var opt_sint64: Int64? = nil
        var opt_fixed64: UInt64? = nil
        var opt_sfixed64: Int64? = nil
        var opt_bool: Bool? = nil
        var opt_float: Float? = nil
        var opt_double: Double? = nil
        var opt_string: String? = nil
        var opt_bytes: Data? = nil
        var opt_nested_enum: AllTypes.NestedEnum? = nil
        var opt_nested_message: AllTypes.NestedMessage? = nil
        var req_int32: Int32? = nil
        var req_uint32: UInt32? = nil
        var req_sint32: Int32? = nil
        var req_fixed32: UInt32? = nil
        var req_sfixed32: Int32? = nil
        var req_int64: Int64? = nil
        var req_uint64: UInt64? = nil
        var req_sint64: Int64? = nil
        var req_fixed64: UInt64? = nil
        var req_sfixed64: Int64? = nil
        var req_bool: Bool? = nil
        var req_float: Float? = nil
        var req_double: Double? = nil
        var req_string: String? = nil
        var req_bytes: Data? = nil
        var req_nested_enum: AllTypes.NestedEnum? = nil
        var req_nested_message: AllTypes.NestedMessage? = nil
        var rep_int32: [Int32] = []
        var rep_uint32: [UInt32] = []
        var rep_sint32: [Int32] = []
        var rep_fixed32: [UInt32] = []
        var rep_sfixed32: [Int32] = []
        var rep_int64: [Int64] = []
        var rep_uint64: [UInt64] = []
        var rep_sint64: [Int64] = []
        var rep_fixed64: [UInt64] = []
        var rep_sfixed64: [Int64] = []
        var rep_bool: [Bool] = []
        var rep_float: [Float] = []
        var rep_double: [Double] = []
        var rep_string: [String] = []
        var rep_bytes: [Data] = []
        var rep_nested_enum: [AllTypes.NestedEnum] = []
        var rep_nested_message: [AllTypes.NestedMessage] = []
        var pack_int32: [Int32] = []
        var pack_uint32: [UInt32] = []
        var pack_sint32: [Int32] = []
        var pack_fixed32: [UInt32] = []
        var pack_sfixed32: [Int32] = []
        var pack_int64: [Int64] = []
        var pack_uint64: [UInt64] = []
        var pack_sint64: [Int64] = []
        var pack_fixed64: [UInt64] = []
        var pack_sfixed64: [Int64] = []
        var pack_bool: [Bool] = []
        var pack_float: [Float] = []
        var pack_double: [Double] = []
        var pack_nested_enum: [AllTypes.NestedEnum] = []
        var default_int32: Int32? = nil
        var default_uint32: UInt32? = nil
        var default_sint32: Int32? = nil
        var default_fixed32: UInt32? = nil
        var default_sfixed32: Int32? = nil
        var default_int64: Int64? = nil
        var default_uint64: UInt64? = nil
        var default_sint64: Int64? = nil
        var default_fixed64: UInt64? = nil
        var default_sfixed64: Int64? = nil
        var default_bool: Bool? = nil
        var default_float: Float? = nil
        var default_double: Double? = nil
        var default_string: String? = nil
        var default_bytes: Data? = nil
        var default_nested_enum: AllTypes.NestedEnum? = nil
        var map_int32_int32: [Int32 : Int32] = [:]
        var map_string_string: [String : String] = [:]
        var map_string_message: [String : AllTypes.NestedMessage] = [:]
        var map_string_enum: [String : AllTypes.NestedEnum] = [:]
        var ext_opt_int32: Int32? = nil
        var ext_opt_uint32: UInt32? = nil
        var ext_opt_sint32: Int32? = nil
        var ext_opt_fixed32: UInt32? = nil
        var ext_opt_sfixed32: Int32? = nil
        var ext_opt_int64: Int64? = nil
        var ext_opt_uint64: UInt64? = nil
        var ext_opt_sint64: Int64? = nil
        var ext_opt_fixed64: UInt64? = nil
        var ext_opt_sfixed64: Int64? = nil
        var ext_opt_bool: Bool? = nil
        var ext_opt_float: Float? = nil
        var ext_opt_double: Double? = nil
        var ext_opt_string: String? = nil
        var ext_opt_bytes: Data? = nil
        var ext_opt_nested_enum: AllTypes.NestedEnum? = nil
        var ext_opt_nested_message: AllTypes.NestedMessage? = nil
        var ext_rep_int32: [Int32] = []
        var ext_rep_uint32: [UInt32] = []
        var ext_rep_sint32: [Int32] = []
        var ext_rep_fixed32: [UInt32] = []
        var ext_rep_sfixed32: [Int32] = []
        var ext_rep_int64: [Int64] = []
        var ext_rep_uint64: [UInt64] = []
        var ext_rep_sint64: [Int64] = []
        var ext_rep_fixed64: [UInt64] = []
        var ext_rep_sfixed64: [Int64] = []
        var ext_rep_bool: [Bool] = []
        var ext_rep_float: [Float] = []
        var ext_rep_double: [Double] = []
        var ext_rep_string: [String] = []
        var ext_rep_bytes: [Data] = []
        var ext_rep_nested_enum: [AllTypes.NestedEnum] = []
        var ext_rep_nested_message: [AllTypes.NestedMessage] = []
        var ext_pack_int32: [Int32] = []
        var ext_pack_uint32: [UInt32] = []
        var ext_pack_sint32: [Int32] = []
        var ext_pack_fixed32: [UInt32] = []
        var ext_pack_sfixed32: [Int32] = []
        var ext_pack_int64: [Int64] = []
        var ext_pack_uint64: [UInt64] = []
        var ext_pack_sint64: [Int64] = []
        var ext_pack_fixed64: [UInt64] = []
        var ext_pack_sfixed64: [Int64] = []
        var ext_pack_bool: [Bool] = []
        var ext_pack_float: [Float] = []
        var ext_pack_double: [Double] = []
        var ext_pack_nested_enum: [AllTypes.NestedEnum] = []

        let unknownFields = try reader.forEachTag { tag in
            switch tag {
                case 1: opt_int32 = try reader.decode(Int32.self)
                case 2: opt_uint32 = try reader.decode(UInt32.self)
                case 3: opt_sint32 = try reader.decode(Int32.self, encoding: .signed)
                case 4: opt_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
                case 5: opt_sfixed32 = try reader.decode(Int32.self)
                case 6: opt_int64 = try reader.decode(Int64.self)
                case 7: opt_uint64 = try reader.decode(UInt64.self)
                case 8: opt_sint64 = try reader.decode(Int64.self, encoding: .signed)
                case 9: opt_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
                case 10: opt_sfixed64 = try reader.decode(Int64.self)
                case 11: opt_bool = try reader.decode(Bool.self)
                case 12: opt_float = try reader.decode(Float.self)
                case 13: opt_double = try reader.decode(Double.self)
                case 14: opt_string = try reader.decode(String.self)
                case 15: opt_bytes = try reader.decode(Data.self)
                case 16: opt_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
                case 17: opt_nested_message = try reader.decode(AllTypes.NestedMessage.self)
                case 101: req_int32 = try reader.decode(Int32.self)
                case 102: req_uint32 = try reader.decode(UInt32.self)
                case 103: req_sint32 = try reader.decode(Int32.self, encoding: .signed)
                case 104: req_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
                case 105: req_sfixed32 = try reader.decode(Int32.self)
                case 106: req_int64 = try reader.decode(Int64.self)
                case 107: req_uint64 = try reader.decode(UInt64.self)
                case 108: req_sint64 = try reader.decode(Int64.self, encoding: .signed)
                case 109: req_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
                case 110: req_sfixed64 = try reader.decode(Int64.self)
                case 111: req_bool = try reader.decode(Bool.self)
                case 112: req_float = try reader.decode(Float.self)
                case 113: req_double = try reader.decode(Double.self)
                case 114: req_string = try reader.decode(String.self)
                case 115: req_bytes = try reader.decode(Data.self)
                case 116: req_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
                case 117: req_nested_message = try reader.decode(AllTypes.NestedMessage.self)
                case 201: try reader.decode(into: &rep_int32)
                case 202: try reader.decode(into: &rep_uint32)
                case 203: try reader.decode(into: &rep_sint32, encoding: .signed)
                case 204: try reader.decode(into: &rep_fixed32, encoding: .fixed)
                case 205: try reader.decode(into: &rep_sfixed32)
                case 206: try reader.decode(into: &rep_int64)
                case 207: try reader.decode(into: &rep_uint64)
                case 208: try reader.decode(into: &rep_sint64, encoding: .signed)
                case 209: try reader.decode(into: &rep_fixed64, encoding: .fixed)
                case 210: try reader.decode(into: &rep_sfixed64)
                case 211: try reader.decode(into: &rep_bool)
                case 212: try reader.decode(into: &rep_float)
                case 213: try reader.decode(into: &rep_double)
                case 214: try reader.decode(into: &rep_string)
                case 215: try reader.decode(into: &rep_bytes)
                case 216: try reader.decode(into: &rep_nested_enum)
                case 217: try reader.decode(into: &rep_nested_message)
                case 301: try reader.decode(into: &pack_int32)
                case 302: try reader.decode(into: &pack_uint32)
                case 303: try reader.decode(into: &pack_sint32, encoding: .signed)
                case 304: try reader.decode(into: &pack_fixed32, encoding: .fixed)
                case 305: try reader.decode(into: &pack_sfixed32)
                case 306: try reader.decode(into: &pack_int64)
                case 307: try reader.decode(into: &pack_uint64)
                case 308: try reader.decode(into: &pack_sint64, encoding: .signed)
                case 309: try reader.decode(into: &pack_fixed64, encoding: .fixed)
                case 310: try reader.decode(into: &pack_sfixed64)
                case 311: try reader.decode(into: &pack_bool)
                case 312: try reader.decode(into: &pack_float)
                case 313: try reader.decode(into: &pack_double)
                case 316: try reader.decode(into: &pack_nested_enum)
                case 401: default_int32 = try reader.decode(Int32.self)
                case 402: default_uint32 = try reader.decode(UInt32.self)
                case 403: default_sint32 = try reader.decode(Int32.self, encoding: .signed)
                case 404: default_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
                case 405: default_sfixed32 = try reader.decode(Int32.self)
                case 406: default_int64 = try reader.decode(Int64.self)
                case 407: default_uint64 = try reader.decode(UInt64.self)
                case 408: default_sint64 = try reader.decode(Int64.self, encoding: .signed)
                case 409: default_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
                case 410: default_sfixed64 = try reader.decode(Int64.self)
                case 411: default_bool = try reader.decode(Bool.self)
                case 412: default_float = try reader.decode(Float.self)
                case 413: default_double = try reader.decode(Double.self)
                case 414: default_string = try reader.decode(String.self)
                case 415: default_bytes = try reader.decode(Data.self)
                case 416: default_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
                case 501: try reader.decode(into: &map_int32_int32)
                case 502: try reader.decode(into: &map_string_string)
                case 503: try reader.decode(into: &map_string_message)
                case 504: try reader.decode(into: &map_string_enum)
                case 1001: ext_opt_int32 = try reader.decode(Int32.self)
                case 1002: ext_opt_uint32 = try reader.decode(UInt32.self)
                case 1003: ext_opt_sint32 = try reader.decode(Int32.self, encoding: .signed)
                case 1004: ext_opt_fixed32 = try reader.decode(UInt32.self, encoding: .fixed)
                case 1005: ext_opt_sfixed32 = try reader.decode(Int32.self)
                case 1006: ext_opt_int64 = try reader.decode(Int64.self)
                case 1007: ext_opt_uint64 = try reader.decode(UInt64.self)
                case 1008: ext_opt_sint64 = try reader.decode(Int64.self, encoding: .signed)
                case 1009: ext_opt_fixed64 = try reader.decode(UInt64.self, encoding: .fixed)
                case 1010: ext_opt_sfixed64 = try reader.decode(Int64.self)
                case 1011: ext_opt_bool = try reader.decode(Bool.self)
                case 1012: ext_opt_float = try reader.decode(Float.self)
                case 1013: ext_opt_double = try reader.decode(Double.self)
                case 1014: ext_opt_string = try reader.decode(String.self)
                case 1015: ext_opt_bytes = try reader.decode(Data.self)
                case 1016: ext_opt_nested_enum = try reader.decode(AllTypes.NestedEnum.self)
                case 1017: ext_opt_nested_message = try reader.decode(AllTypes.NestedMessage.self)
                case 1101: try reader.decode(into: &ext_rep_int32)
                case 1102: try reader.decode(into: &ext_rep_uint32)
                case 1103: try reader.decode(into: &ext_rep_sint32, encoding: .signed)
                case 1104: try reader.decode(into: &ext_rep_fixed32, encoding: .fixed)
                case 1105: try reader.decode(into: &ext_rep_sfixed32)
                case 1106: try reader.decode(into: &ext_rep_int64)
                case 1107: try reader.decode(into: &ext_rep_uint64)
                case 1108: try reader.decode(into: &ext_rep_sint64, encoding: .signed)
                case 1109: try reader.decode(into: &ext_rep_fixed64, encoding: .fixed)
                case 1110: try reader.decode(into: &ext_rep_sfixed64)
                case 1111: try reader.decode(into: &ext_rep_bool)
                case 1112: try reader.decode(into: &ext_rep_float)
                case 1113: try reader.decode(into: &ext_rep_double)
                case 1114: try reader.decode(into: &ext_rep_string)
                case 1115: try reader.decode(into: &ext_rep_bytes)
                case 1116: try reader.decode(into: &ext_rep_nested_enum)
                case 1117: try reader.decode(into: &ext_rep_nested_message)
                case 1201: try reader.decode(into: &ext_pack_int32)
                case 1202: try reader.decode(into: &ext_pack_uint32)
                case 1203: try reader.decode(into: &ext_pack_sint32, encoding: .signed)
                case 1204: try reader.decode(into: &ext_pack_fixed32, encoding: .fixed)
                case 1205: try reader.decode(into: &ext_pack_sfixed32)
                case 1206: try reader.decode(into: &ext_pack_int64)
                case 1207: try reader.decode(into: &ext_pack_uint64)
                case 1208: try reader.decode(into: &ext_pack_sint64, encoding: .signed)
                case 1209: try reader.decode(into: &ext_pack_fixed64, encoding: .fixed)
                case 1210: try reader.decode(into: &ext_pack_sfixed64)
                case 1211: try reader.decode(into: &ext_pack_bool)
                case 1212: try reader.decode(into: &ext_pack_float)
                case 1213: try reader.decode(into: &ext_pack_double)
                case 1216: try reader.decode(into: &ext_pack_nested_enum)
                default: try reader.readUnknownField(tag: tag)
            }
        }

        self.opt_int32 = opt_int32
        self.opt_uint32 = opt_uint32
        self.opt_sint32 = opt_sint32
        self.opt_fixed32 = opt_fixed32
        self.opt_sfixed32 = opt_sfixed32
        self.opt_int64 = opt_int64
        self.opt_uint64 = opt_uint64
        self.opt_sint64 = opt_sint64
        self.opt_fixed64 = opt_fixed64
        self.opt_sfixed64 = opt_sfixed64
        self.opt_bool = opt_bool
        self.opt_float = opt_float
        self.opt_double = opt_double
        self.opt_string = opt_string
        self.opt_bytes = opt_bytes
        self.opt_nested_enum = opt_nested_enum
        self.opt_nested_message = opt_nested_message
        self.req_int32 = try AllTypes.checkIfMissing(req_int32, "req_int32")
        self.req_uint32 = try AllTypes.checkIfMissing(req_uint32, "req_uint32")
        self.req_sint32 = try AllTypes.checkIfMissing(req_sint32, "req_sint32")
        self.req_fixed32 = try AllTypes.checkIfMissing(req_fixed32, "req_fixed32")
        self.req_sfixed32 = try AllTypes.checkIfMissing(req_sfixed32, "req_sfixed32")
        self.req_int64 = try AllTypes.checkIfMissing(req_int64, "req_int64")
        self.req_uint64 = try AllTypes.checkIfMissing(req_uint64, "req_uint64")
        self.req_sint64 = try AllTypes.checkIfMissing(req_sint64, "req_sint64")
        self.req_fixed64 = try AllTypes.checkIfMissing(req_fixed64, "req_fixed64")
        self.req_sfixed64 = try AllTypes.checkIfMissing(req_sfixed64, "req_sfixed64")
        self.req_bool = try AllTypes.checkIfMissing(req_bool, "req_bool")
        self.req_float = try AllTypes.checkIfMissing(req_float, "req_float")
        self.req_double = try AllTypes.checkIfMissing(req_double, "req_double")
        self.req_string = try AllTypes.checkIfMissing(req_string, "req_string")
        self.req_bytes = try AllTypes.checkIfMissing(req_bytes, "req_bytes")
        self.req_nested_enum = try AllTypes.checkIfMissing(req_nested_enum, "req_nested_enum")
        self.req_nested_message = try AllTypes.checkIfMissing(req_nested_message, "req_nested_message")
        self.rep_int32 = try AllTypes.checkIfMissing(rep_int32, "rep_int32")
        self.rep_uint32 = try AllTypes.checkIfMissing(rep_uint32, "rep_uint32")
        self.rep_sint32 = try AllTypes.checkIfMissing(rep_sint32, "rep_sint32")
        self.rep_fixed32 = try AllTypes.checkIfMissing(rep_fixed32, "rep_fixed32")
        self.rep_sfixed32 = try AllTypes.checkIfMissing(rep_sfixed32, "rep_sfixed32")
        self.rep_int64 = try AllTypes.checkIfMissing(rep_int64, "rep_int64")
        self.rep_uint64 = try AllTypes.checkIfMissing(rep_uint64, "rep_uint64")
        self.rep_sint64 = try AllTypes.checkIfMissing(rep_sint64, "rep_sint64")
        self.rep_fixed64 = try AllTypes.checkIfMissing(rep_fixed64, "rep_fixed64")
        self.rep_sfixed64 = try AllTypes.checkIfMissing(rep_sfixed64, "rep_sfixed64")
        self.rep_bool = try AllTypes.checkIfMissing(rep_bool, "rep_bool")
        self.rep_float = try AllTypes.checkIfMissing(rep_float, "rep_float")
        self.rep_double = try AllTypes.checkIfMissing(rep_double, "rep_double")
        self.rep_string = try AllTypes.checkIfMissing(rep_string, "rep_string")
        self.rep_bytes = try AllTypes.checkIfMissing(rep_bytes, "rep_bytes")
        self.rep_nested_enum = try AllTypes.checkIfMissing(rep_nested_enum, "rep_nested_enum")
        self.rep_nested_message = try AllTypes.checkIfMissing(rep_nested_message, "rep_nested_message")
        self.pack_int32 = try AllTypes.checkIfMissing(pack_int32, "pack_int32")
        self.pack_uint32 = try AllTypes.checkIfMissing(pack_uint32, "pack_uint32")
        self.pack_sint32 = try AllTypes.checkIfMissing(pack_sint32, "pack_sint32")
        self.pack_fixed32 = try AllTypes.checkIfMissing(pack_fixed32, "pack_fixed32")
        self.pack_sfixed32 = try AllTypes.checkIfMissing(pack_sfixed32, "pack_sfixed32")
        self.pack_int64 = try AllTypes.checkIfMissing(pack_int64, "pack_int64")
        self.pack_uint64 = try AllTypes.checkIfMissing(pack_uint64, "pack_uint64")
        self.pack_sint64 = try AllTypes.checkIfMissing(pack_sint64, "pack_sint64")
        self.pack_fixed64 = try AllTypes.checkIfMissing(pack_fixed64, "pack_fixed64")
        self.pack_sfixed64 = try AllTypes.checkIfMissing(pack_sfixed64, "pack_sfixed64")
        self.pack_bool = try AllTypes.checkIfMissing(pack_bool, "pack_bool")
        self.pack_float = try AllTypes.checkIfMissing(pack_float, "pack_float")
        self.pack_double = try AllTypes.checkIfMissing(pack_double, "pack_double")
        self.pack_nested_enum = try AllTypes.checkIfMissing(pack_nested_enum, "pack_nested_enum")
        self.default_int32 = default_int32
        self.default_uint32 = default_uint32
        self.default_sint32 = default_sint32
        self.default_fixed32 = default_fixed32
        self.default_sfixed32 = default_sfixed32
        self.default_int64 = default_int64
        self.default_uint64 = default_uint64
        self.default_sint64 = default_sint64
        self.default_fixed64 = default_fixed64
        self.default_sfixed64 = default_sfixed64
        self.default_bool = default_bool
        self.default_float = default_float
        self.default_double = default_double
        self.default_string = default_string
        self.default_bytes = default_bytes
        self.default_nested_enum = default_nested_enum
        self.map_int32_int32 = try AllTypes.checkIfMissing(map_int32_int32, "map_int32_int32")
        self.map_string_string = try AllTypes.checkIfMissing(map_string_string, "map_string_string")
        self.map_string_message = try AllTypes.checkIfMissing(map_string_message, "map_string_message")
        self.map_string_enum = try AllTypes.checkIfMissing(map_string_enum, "map_string_enum")
        self.ext_opt_int32 = ext_opt_int32
        self.ext_opt_uint32 = ext_opt_uint32
        self.ext_opt_sint32 = ext_opt_sint32
        self.ext_opt_fixed32 = ext_opt_fixed32
        self.ext_opt_sfixed32 = ext_opt_sfixed32
        self.ext_opt_int64 = ext_opt_int64
        self.ext_opt_uint64 = ext_opt_uint64
        self.ext_opt_sint64 = ext_opt_sint64
        self.ext_opt_fixed64 = ext_opt_fixed64
        self.ext_opt_sfixed64 = ext_opt_sfixed64
        self.ext_opt_bool = ext_opt_bool
        self.ext_opt_float = ext_opt_float
        self.ext_opt_double = ext_opt_double
        self.ext_opt_string = ext_opt_string
        self.ext_opt_bytes = ext_opt_bytes
        self.ext_opt_nested_enum = ext_opt_nested_enum
        self.ext_opt_nested_message = ext_opt_nested_message
        self.ext_rep_int32 = try AllTypes.checkIfMissing(ext_rep_int32, "ext_rep_int32")
        self.ext_rep_uint32 = try AllTypes.checkIfMissing(ext_rep_uint32, "ext_rep_uint32")
        self.ext_rep_sint32 = try AllTypes.checkIfMissing(ext_rep_sint32, "ext_rep_sint32")
        self.ext_rep_fixed32 = try AllTypes.checkIfMissing(ext_rep_fixed32, "ext_rep_fixed32")
        self.ext_rep_sfixed32 = try AllTypes.checkIfMissing(ext_rep_sfixed32, "ext_rep_sfixed32")
        self.ext_rep_int64 = try AllTypes.checkIfMissing(ext_rep_int64, "ext_rep_int64")
        self.ext_rep_uint64 = try AllTypes.checkIfMissing(ext_rep_uint64, "ext_rep_uint64")
        self.ext_rep_sint64 = try AllTypes.checkIfMissing(ext_rep_sint64, "ext_rep_sint64")
        self.ext_rep_fixed64 = try AllTypes.checkIfMissing(ext_rep_fixed64, "ext_rep_fixed64")
        self.ext_rep_sfixed64 = try AllTypes.checkIfMissing(ext_rep_sfixed64, "ext_rep_sfixed64")
        self.ext_rep_bool = try AllTypes.checkIfMissing(ext_rep_bool, "ext_rep_bool")
        self.ext_rep_float = try AllTypes.checkIfMissing(ext_rep_float, "ext_rep_float")
        self.ext_rep_double = try AllTypes.checkIfMissing(ext_rep_double, "ext_rep_double")
        self.ext_rep_string = try AllTypes.checkIfMissing(ext_rep_string, "ext_rep_string")
        self.ext_rep_bytes = try AllTypes.checkIfMissing(ext_rep_bytes, "ext_rep_bytes")
        self.ext_rep_nested_enum = try AllTypes.checkIfMissing(ext_rep_nested_enum, "ext_rep_nested_enum")
        self.ext_rep_nested_message = try AllTypes.checkIfMissing(ext_rep_nested_message, "ext_rep_nested_message")
        self.ext_pack_int32 = try AllTypes.checkIfMissing(ext_pack_int32, "ext_pack_int32")
        self.ext_pack_uint32 = try AllTypes.checkIfMissing(ext_pack_uint32, "ext_pack_uint32")
        self.ext_pack_sint32 = try AllTypes.checkIfMissing(ext_pack_sint32, "ext_pack_sint32")
        self.ext_pack_fixed32 = try AllTypes.checkIfMissing(ext_pack_fixed32, "ext_pack_fixed32")
        self.ext_pack_sfixed32 = try AllTypes.checkIfMissing(ext_pack_sfixed32, "ext_pack_sfixed32")
        self.ext_pack_int64 = try AllTypes.checkIfMissing(ext_pack_int64, "ext_pack_int64")
        self.ext_pack_uint64 = try AllTypes.checkIfMissing(ext_pack_uint64, "ext_pack_uint64")
        self.ext_pack_sint64 = try AllTypes.checkIfMissing(ext_pack_sint64, "ext_pack_sint64")
        self.ext_pack_fixed64 = try AllTypes.checkIfMissing(ext_pack_fixed64, "ext_pack_fixed64")
        self.ext_pack_sfixed64 = try AllTypes.checkIfMissing(ext_pack_sfixed64, "ext_pack_sfixed64")
        self.ext_pack_bool = try AllTypes.checkIfMissing(ext_pack_bool, "ext_pack_bool")
        self.ext_pack_float = try AllTypes.checkIfMissing(ext_pack_float, "ext_pack_float")
        self.ext_pack_double = try AllTypes.checkIfMissing(ext_pack_double, "ext_pack_double")
        self.ext_pack_nested_enum = try AllTypes.checkIfMissing(ext_pack_nested_enum, "ext_pack_nested_enum")
        self.unknownFields = unknownFields
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: opt_int32)
        try writer.encode(tag: 2, value: opt_uint32)
        try writer.encode(tag: 3, value: opt_sint32, encoding: .signed)
        try writer.encode(tag: 4, value: opt_fixed32, encoding: .fixed)
        try writer.encode(tag: 5, value: opt_sfixed32)
        try writer.encode(tag: 6, value: opt_int64)
        try writer.encode(tag: 7, value: opt_uint64)
        try writer.encode(tag: 8, value: opt_sint64, encoding: .signed)
        try writer.encode(tag: 9, value: opt_fixed64, encoding: .fixed)
        try writer.encode(tag: 10, value: opt_sfixed64)
        try writer.encode(tag: 11, value: opt_bool)
        try writer.encode(tag: 12, value: opt_float)
        try writer.encode(tag: 13, value: opt_double)
        try writer.encode(tag: 14, value: opt_string)
        try writer.encode(tag: 15, value: opt_bytes)
        try writer.encode(tag: 16, value: opt_nested_enum)
        try writer.encode(tag: 17, value: opt_nested_message)
        try writer.encode(tag: 101, value: req_int32)
        try writer.encode(tag: 102, value: req_uint32)
        try writer.encode(tag: 103, value: req_sint32, encoding: .signed)
        try writer.encode(tag: 104, value: req_fixed32, encoding: .fixed)
        try writer.encode(tag: 105, value: req_sfixed32)
        try writer.encode(tag: 106, value: req_int64)
        try writer.encode(tag: 107, value: req_uint64)
        try writer.encode(tag: 108, value: req_sint64, encoding: .signed)
        try writer.encode(tag: 109, value: req_fixed64, encoding: .fixed)
        try writer.encode(tag: 110, value: req_sfixed64)
        try writer.encode(tag: 111, value: req_bool)
        try writer.encode(tag: 112, value: req_float)
        try writer.encode(tag: 113, value: req_double)
        try writer.encode(tag: 114, value: req_string)
        try writer.encode(tag: 115, value: req_bytes)
        try writer.encode(tag: 116, value: req_nested_enum)
        try writer.encode(tag: 117, value: req_nested_message)
        try writer.encode(tag: 201, value: rep_int32)
        try writer.encode(tag: 202, value: rep_uint32)
        try writer.encode(tag: 203, value: rep_sint32, encoding: .signed)
        try writer.encode(tag: 204, value: rep_fixed32, encoding: .fixed)
        try writer.encode(tag: 205, value: rep_sfixed32)
        try writer.encode(tag: 206, value: rep_int64)
        try writer.encode(tag: 207, value: rep_uint64)
        try writer.encode(tag: 208, value: rep_sint64, encoding: .signed)
        try writer.encode(tag: 209, value: rep_fixed64, encoding: .fixed)
        try writer.encode(tag: 210, value: rep_sfixed64)
        try writer.encode(tag: 211, value: rep_bool)
        try writer.encode(tag: 212, value: rep_float)
        try writer.encode(tag: 213, value: rep_double)
        try writer.encode(tag: 214, value: rep_string)
        try writer.encode(tag: 215, value: rep_bytes)
        try writer.encode(tag: 216, value: rep_nested_enum)
        try writer.encode(tag: 217, value: rep_nested_message)
        try writer.encode(tag: 301, value: pack_int32, packed: true)
        try writer.encode(tag: 302, value: pack_uint32, packed: true)
        try writer.encode(tag: 303, value: pack_sint32, encoding: .signed, packed: true)
        try writer.encode(tag: 304, value: pack_fixed32, encoding: .fixed, packed: true)
        try writer.encode(tag: 305, value: pack_sfixed32, packed: true)
        try writer.encode(tag: 306, value: pack_int64, packed: true)
        try writer.encode(tag: 307, value: pack_uint64, packed: true)
        try writer.encode(tag: 308, value: pack_sint64, encoding: .signed, packed: true)
        try writer.encode(tag: 309, value: pack_fixed64, encoding: .fixed, packed: true)
        try writer.encode(tag: 310, value: pack_sfixed64, packed: true)
        try writer.encode(tag: 311, value: pack_bool, packed: true)
        try writer.encode(tag: 312, value: pack_float, packed: true)
        try writer.encode(tag: 313, value: pack_double, packed: true)
        try writer.encode(tag: 316, value: pack_nested_enum, packed: true)
        try writer.encode(tag: 401, value: default_int32)
        try writer.encode(tag: 402, value: default_uint32)
        try writer.encode(tag: 403, value: default_sint32, encoding: .signed)
        try writer.encode(tag: 404, value: default_fixed32, encoding: .fixed)
        try writer.encode(tag: 405, value: default_sfixed32)
        try writer.encode(tag: 406, value: default_int64)
        try writer.encode(tag: 407, value: default_uint64)
        try writer.encode(tag: 408, value: default_sint64, encoding: .signed)
        try writer.encode(tag: 409, value: default_fixed64, encoding: .fixed)
        try writer.encode(tag: 410, value: default_sfixed64)
        try writer.encode(tag: 411, value: default_bool)
        try writer.encode(tag: 412, value: default_float)
        try writer.encode(tag: 413, value: default_double)
        try writer.encode(tag: 414, value: default_string)
        try writer.encode(tag: 415, value: default_bytes)
        try writer.encode(tag: 416, value: default_nested_enum)
        try writer.encode(tag: 501, value: map_int32_int32)
        try writer.encode(tag: 502, value: map_string_string)
        try writer.encode(tag: 503, value: map_string_message)
        try writer.encode(tag: 504, value: map_string_enum)
        try writer.encode(tag: 1001, value: ext_opt_int32)
        try writer.encode(tag: 1002, value: ext_opt_uint32)
        try writer.encode(tag: 1003, value: ext_opt_sint32, encoding: .signed)
        try writer.encode(tag: 1004, value: ext_opt_fixed32, encoding: .fixed)
        try writer.encode(tag: 1005, value: ext_opt_sfixed32)
        try writer.encode(tag: 1006, value: ext_opt_int64)
        try writer.encode(tag: 1007, value: ext_opt_uint64)
        try writer.encode(tag: 1008, value: ext_opt_sint64, encoding: .signed)
        try writer.encode(tag: 1009, value: ext_opt_fixed64, encoding: .fixed)
        try writer.encode(tag: 1010, value: ext_opt_sfixed64)
        try writer.encode(tag: 1011, value: ext_opt_bool)
        try writer.encode(tag: 1012, value: ext_opt_float)
        try writer.encode(tag: 1013, value: ext_opt_double)
        try writer.encode(tag: 1014, value: ext_opt_string)
        try writer.encode(tag: 1015, value: ext_opt_bytes)
        try writer.encode(tag: 1016, value: ext_opt_nested_enum)
        try writer.encode(tag: 1017, value: ext_opt_nested_message)
        try writer.encode(tag: 1101, value: ext_rep_int32)
        try writer.encode(tag: 1102, value: ext_rep_uint32)
        try writer.encode(tag: 1103, value: ext_rep_sint32, encoding: .signed)
        try writer.encode(tag: 1104, value: ext_rep_fixed32, encoding: .fixed)
        try writer.encode(tag: 1105, value: ext_rep_sfixed32)
        try writer.encode(tag: 1106, value: ext_rep_int64)
        try writer.encode(tag: 1107, value: ext_rep_uint64)
        try writer.encode(tag: 1108, value: ext_rep_sint64, encoding: .signed)
        try writer.encode(tag: 1109, value: ext_rep_fixed64, encoding: .fixed)
        try writer.encode(tag: 1110, value: ext_rep_sfixed64)
        try writer.encode(tag: 1111, value: ext_rep_bool)
        try writer.encode(tag: 1112, value: ext_rep_float)
        try writer.encode(tag: 1113, value: ext_rep_double)
        try writer.encode(tag: 1114, value: ext_rep_string)
        try writer.encode(tag: 1115, value: ext_rep_bytes)
        try writer.encode(tag: 1116, value: ext_rep_nested_enum)
        try writer.encode(tag: 1117, value: ext_rep_nested_message)
        try writer.encode(tag: 1201, value: ext_pack_int32, packed: true)
        try writer.encode(tag: 1202, value: ext_pack_uint32, packed: true)
        try writer.encode(tag: 1203, value: ext_pack_sint32, encoding: .signed, packed: true)
        try writer.encode(tag: 1204, value: ext_pack_fixed32, encoding: .fixed, packed: true)
        try writer.encode(tag: 1205, value: ext_pack_sfixed32, packed: true)
        try writer.encode(tag: 1206, value: ext_pack_int64, packed: true)
        try writer.encode(tag: 1207, value: ext_pack_uint64, packed: true)
        try writer.encode(tag: 1208, value: ext_pack_sint64, encoding: .signed, packed: true)
        try writer.encode(tag: 1209, value: ext_pack_fixed64, encoding: .fixed, packed: true)
        try writer.encode(tag: 1210, value: ext_pack_sfixed64, packed: true)
        try writer.encode(tag: 1211, value: ext_pack_bool, packed: true)
        try writer.encode(tag: 1212, value: ext_pack_float, packed: true)
        try writer.encode(tag: 1213, value: ext_pack_double, packed: true)
        try writer.encode(tag: 1216, value: ext_pack_nested_enum, packed: true)
        try writer.writeUnknownFields(unknownFields)
    }
}

extension AllTypes : Codable {
    public enum CodingKeys : String, CodingKey {

        case opt_int32
        case opt_uint32
        case opt_sint32
        case opt_fixed32
        case opt_sfixed32
        case opt_int64
        case opt_uint64
        case opt_sint64
        case opt_fixed64
        case opt_sfixed64
        case opt_bool
        case opt_float
        case opt_double
        case opt_string
        case opt_bytes
        case opt_nested_enum
        case opt_nested_message
        case req_int32
        case req_uint32
        case req_sint32
        case req_fixed32
        case req_sfixed32
        case req_int64
        case req_uint64
        case req_sint64
        case req_fixed64
        case req_sfixed64
        case req_bool
        case req_float
        case req_double
        case req_string
        case req_bytes
        case req_nested_enum
        case req_nested_message
        case rep_int32
        case rep_uint32
        case rep_sint32
        case rep_fixed32
        case rep_sfixed32
        case rep_int64
        case rep_uint64
        case rep_sint64
        case rep_fixed64
        case rep_sfixed64
        case rep_bool
        case rep_float
        case rep_double
        case rep_string
        case rep_bytes
        case rep_nested_enum
        case rep_nested_message
        case pack_int32
        case pack_uint32
        case pack_sint32
        case pack_fixed32
        case pack_sfixed32
        case pack_int64
        case pack_uint64
        case pack_sint64
        case pack_fixed64
        case pack_sfixed64
        case pack_bool
        case pack_float
        case pack_double
        case pack_nested_enum
        case default_int32
        case default_uint32
        case default_sint32
        case default_fixed32
        case default_sfixed32
        case default_int64
        case default_uint64
        case default_sint64
        case default_fixed64
        case default_sfixed64
        case default_bool
        case default_float
        case default_double
        case default_string
        case default_bytes
        case default_nested_enum
        case map_int32_int32
        case map_string_string
        case map_string_message
        case map_string_enum
        case ext_opt_int32
        case ext_opt_uint32
        case ext_opt_sint32
        case ext_opt_fixed32
        case ext_opt_sfixed32
        case ext_opt_int64
        case ext_opt_uint64
        case ext_opt_sint64
        case ext_opt_fixed64
        case ext_opt_sfixed64
        case ext_opt_bool
        case ext_opt_float
        case ext_opt_double
        case ext_opt_string
        case ext_opt_bytes
        case ext_opt_nested_enum
        case ext_opt_nested_message
        case ext_rep_int32
        case ext_rep_uint32
        case ext_rep_sint32
        case ext_rep_fixed32
        case ext_rep_sfixed32
        case ext_rep_int64
        case ext_rep_uint64
        case ext_rep_sint64
        case ext_rep_fixed64
        case ext_rep_sfixed64
        case ext_rep_bool
        case ext_rep_float
        case ext_rep_double
        case ext_rep_string
        case ext_rep_bytes
        case ext_rep_nested_enum
        case ext_rep_nested_message
        case ext_pack_int32
        case ext_pack_uint32
        case ext_pack_sint32
        case ext_pack_fixed32
        case ext_pack_sfixed32
        case ext_pack_int64
        case ext_pack_uint64
        case ext_pack_sint64
        case ext_pack_fixed64
        case ext_pack_sfixed64
        case ext_pack_bool
        case ext_pack_float
        case ext_pack_double
        case ext_pack_nested_enum

    }
}
