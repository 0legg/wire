// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: all_types.proto
import Foundation
import Wire

public struct AllTypes : Equatable, Proto2Codable, Codable {

  public var opt_int32: Int32?
  public var opt_uint32: UInt32?
  public var opt_sint32: Int32?
  public var opt_fixed32: Int32?
  public var opt_sfixed32: Int32?
  public var opt_int64: Int64?
  public var opt_uint64: UInt64?
  public var opt_sint64: Int64?
  public var opt_fixed64: Int64?
  public var opt_sfixed64: Int64?
  public var opt_bool: Bool?
  public var opt_float: Float?
  public var opt_double: Double?
  public var opt_string: String?
  public var opt_bytes: Data?
  public var opt_nested_enum: NestedEnum?
  public var opt_nested_message: NestedMessage?
  public var req_int32: Int32
  public var req_uint32: UInt32
  public var req_sint32: Int32
  public var req_fixed32: Int32
  public var req_sfixed32: Int32
  public var req_int64: Int64
  public var req_uint64: UInt64
  public var req_sint64: Int64
  public var req_fixed64: Int64
  public var req_sfixed64: Int64
  public var req_bool: Bool
  public var req_float: Float
  public var req_double: Double
  public var req_string: String
  public var req_bytes: Data
  public var req_nested_enum: NestedEnum
  public var req_nested_message: NestedMessage
  public var rep_int32: [Int32]
  public var rep_uint32: [UInt32]
  public var rep_sint32: [Int32]
  public var rep_fixed32: [Int32]
  public var rep_sfixed32: [Int32]
  public var rep_int64: [Int64]
  public var rep_uint64: [UInt64]
  public var rep_sint64: [Int64]
  public var rep_fixed64: [Int64]
  public var rep_sfixed64: [Int64]
  public var rep_bool: [Bool]
  public var rep_float: [Float]
  public var rep_double: [Double]
  public var rep_string: [String]
  public var rep_bytes: [Data]
  public var rep_nested_enum: [NestedEnum]
  public var rep_nested_message: [NestedMessage]
  public var pack_int32: [Int32]
  public var pack_uint32: [UInt32]
  public var pack_sint32: [Int32]
  public var pack_fixed32: [Int32]
  public var pack_sfixed32: [Int32]
  public var pack_int64: [Int64]
  public var pack_uint64: [UInt64]
  public var pack_sint64: [Int64]
  public var pack_fixed64: [Int64]
  public var pack_sfixed64: [Int64]
  public var pack_bool: [Bool]
  public var pack_float: [Float]
  public var pack_double: [Double]
  public var pack_nested_enum: [NestedEnum]
  public var default_int32: Int32?
  public var default_uint32: UInt32?
  public var default_sint32: Int32?
  public var default_fixed32: Int32?
  public var default_sfixed32: Int32?
  public var default_int64: Int64?
  public var default_uint64: UInt64?
  public var default_sint64: Int64?
  public var default_fixed64: Int64?
  public var default_sfixed64: Int64?
  public var default_bool: Bool?
  public var default_float: Float?
  public var default_double: Double?
  public var default_string: String?
  public var default_bytes: Data?
  public var default_nested_enum: NestedEnum?
  public var map_int32_int32: [Int32 : Int32]
  public var map_string_string: [String : String]
  public var map_string_message: [String : NestedMessage]
  public var map_string_enum: [String : NestedEnum]
  public let unknownFields: Data

  public init(from reader: ProtoReader) throws {
    var opt_int32: Int32? = nil
    var opt_uint32: UInt32? = nil
    var opt_sint32: Int32? = nil
    var opt_fixed32: Int32? = nil
    var opt_sfixed32: Int32? = nil
    var opt_int64: Int64? = nil
    var opt_uint64: UInt64? = nil
    var opt_sint64: Int64? = nil
    var opt_fixed64: Int64? = nil
    var opt_sfixed64: Int64? = nil
    var opt_bool: Bool? = nil
    var opt_float: Float? = nil
    var opt_double: Double? = nil
    var opt_string: String? = nil
    var opt_bytes: Data? = nil
    var opt_nested_enum: NestedEnum? = nil
    var opt_nested_message: NestedMessage? = nil
    var req_int32: Int32? = nil
    var req_uint32: UInt32? = nil
    var req_sint32: Int32? = nil
    var req_fixed32: Int32? = nil
    var req_sfixed32: Int32? = nil
    var req_int64: Int64? = nil
    var req_uint64: UInt64? = nil
    var req_sint64: Int64? = nil
    var req_fixed64: Int64? = nil
    var req_sfixed64: Int64? = nil
    var req_bool: Bool? = nil
    var req_float: Float? = nil
    var req_double: Double? = nil
    var req_string: String? = nil
    var req_bytes: Data? = nil
    var req_nested_enum: NestedEnum? = nil
    var req_nested_message: NestedMessage? = nil
    var rep_int32: [Int32] = []
    var rep_uint32: [UInt32] = []
    var rep_sint32: [Int32] = []
    var rep_fixed32: [Int32] = []
    var rep_sfixed32: [Int32] = []
    var rep_int64: [Int64] = []
    var rep_uint64: [UInt64] = []
    var rep_sint64: [Int64] = []
    var rep_fixed64: [Int64] = []
    var rep_sfixed64: [Int64] = []
    var rep_bool: [Bool] = []
    var rep_float: [Float] = []
    var rep_double: [Double] = []
    var rep_string: [String] = []
    var rep_bytes: [Data] = []
    var rep_nested_enum: [NestedEnum] = []
    var rep_nested_message: [NestedMessage] = []
    var pack_int32: [Int32] = []
    var pack_uint32: [UInt32] = []
    var pack_sint32: [Int32] = []
    var pack_fixed32: [Int32] = []
    var pack_sfixed32: [Int32] = []
    var pack_int64: [Int64] = []
    var pack_uint64: [UInt64] = []
    var pack_sint64: [Int64] = []
    var pack_fixed64: [Int64] = []
    var pack_sfixed64: [Int64] = []
    var pack_bool: [Bool] = []
    var pack_float: [Float] = []
    var pack_double: [Double] = []
    var pack_nested_enum: [NestedEnum] = []
    var default_int32: Int32? = nil
    var default_uint32: UInt32? = nil
    var default_sint32: Int32? = nil
    var default_fixed32: Int32? = nil
    var default_sfixed32: Int32? = nil
    var default_int64: Int64? = nil
    var default_uint64: UInt64? = nil
    var default_sint64: Int64? = nil
    var default_fixed64: Int64? = nil
    var default_sfixed64: Int64? = nil
    var default_bool: Bool? = nil
    var default_float: Float? = nil
    var default_double: Double? = nil
    var default_string: String? = nil
    var default_bytes: Data? = nil
    var default_nested_enum: NestedEnum? = nil
    var map_int32_int32: [Int32 : Int32] = [:]
    var map_string_string: [String : String] = [:]
    var map_string_message: [String : NestedMessage] = [:]
    var map_string_enum: [String : NestedEnum] = [:]

    let unknownFields = try reader.forEachTag { tag in
      switch tag {
        case 1: opt_int32 = try reader.decode(Int32.self)
        case 2: opt_uint32 = try reader.decode(UInt32.self)
        case 3: opt_sint32 = try reader.decode(Int32.self)
        case 4: opt_fixed32 = try reader.decode(Int32.self)
        case 5: opt_sfixed32 = try reader.decode(Int32.self)
        case 6: opt_int64 = try reader.decode(Int64.self)
        case 7: opt_uint64 = try reader.decode(UInt64.self)
        case 8: opt_sint64 = try reader.decode(Int64.self)
        case 9: opt_fixed64 = try reader.decode(Int64.self)
        case 10: opt_sfixed64 = try reader.decode(Int64.self)
        case 11: opt_bool = try reader.decode(Bool.self)
        case 12: opt_float = try reader.decode(Float.self)
        case 13: opt_double = try reader.decode(Double.self)
        case 14: opt_string = try reader.decode(String.self)
        case 15: opt_bytes = try reader.decode(Data.self)
        case 16: opt_nested_enum = try reader.decode(NestedEnum.self)
        case 17: opt_nested_message = try reader.decode(NestedMessage.self)
        case 101: req_int32 = try reader.decode(Int32.self)
        case 102: req_uint32 = try reader.decode(UInt32.self)
        case 103: req_sint32 = try reader.decode(Int32.self)
        case 104: req_fixed32 = try reader.decode(Int32.self)
        case 105: req_sfixed32 = try reader.decode(Int32.self)
        case 106: req_int64 = try reader.decode(Int64.self)
        case 107: req_uint64 = try reader.decode(UInt64.self)
        case 108: req_sint64 = try reader.decode(Int64.self)
        case 109: req_fixed64 = try reader.decode(Int64.self)
        case 110: req_sfixed64 = try reader.decode(Int64.self)
        case 111: req_bool = try reader.decode(Bool.self)
        case 112: req_float = try reader.decode(Float.self)
        case 113: req_double = try reader.decode(Double.self)
        case 114: req_string = try reader.decode(String.self)
        case 115: req_bytes = try reader.decode(Data.self)
        case 116: req_nested_enum = try reader.decode(NestedEnum.self)
        case 117: req_nested_message = try reader.decode(NestedMessage.self)
        case 201: rep_int32.append(try reader.decode(Int32.self))
        case 202: rep_uint32.append(try reader.decode(UInt32.self))
        case 203: rep_sint32.append(try reader.decode(Int32.self))
        case 204: rep_fixed32.append(try reader.decode(Int32.self))
        case 205: rep_sfixed32.append(try reader.decode(Int32.self))
        case 206: rep_int64.append(try reader.decode(Int64.self))
        case 207: rep_uint64.append(try reader.decode(UInt64.self))
        case 208: rep_sint64.append(try reader.decode(Int64.self))
        case 209: rep_fixed64.append(try reader.decode(Int64.self))
        case 210: rep_sfixed64.append(try reader.decode(Int64.self))
        case 211: rep_bool.append(try reader.decode(Bool.self))
        case 212: rep_float.append(try reader.decode(Float.self))
        case 213: rep_double.append(try reader.decode(Double.self))
        case 214: rep_string.append(try reader.decode(String.self))
        case 215: rep_bytes.append(try reader.decode(Data.self))
        case 216: try reader.decode(NestedEnum.self).flatMap { rep_nested_enum.append($0) }
        case 217: rep_nested_message.append(try reader.decode(NestedMessage.self))
        case 301: pack_int32.append(try reader.decode(Int32.self))
        case 302: pack_uint32.append(try reader.decode(UInt32.self))
        case 303: pack_sint32.append(try reader.decode(Int32.self))
        case 304: pack_fixed32.append(try reader.decode(Int32.self))
        case 305: pack_sfixed32.append(try reader.decode(Int32.self))
        case 306: pack_int64.append(try reader.decode(Int64.self))
        case 307: pack_uint64.append(try reader.decode(UInt64.self))
        case 308: pack_sint64.append(try reader.decode(Int64.self))
        case 309: pack_fixed64.append(try reader.decode(Int64.self))
        case 310: pack_sfixed64.append(try reader.decode(Int64.self))
        case 311: pack_bool.append(try reader.decode(Bool.self))
        case 312: pack_float.append(try reader.decode(Float.self))
        case 313: pack_double.append(try reader.decode(Double.self))
        case 316: try reader.decode(NestedEnum.self).flatMap { pack_nested_enum.append($0) }
        case 401: default_int32 = try reader.decode(Int32.self)
        case 402: default_uint32 = try reader.decode(UInt32.self)
        case 403: default_sint32 = try reader.decode(Int32.self)
        case 404: default_fixed32 = try reader.decode(Int32.self)
        case 405: default_sfixed32 = try reader.decode(Int32.self)
        case 406: default_int64 = try reader.decode(Int64.self)
        case 407: default_uint64 = try reader.decode(UInt64.self)
        case 408: default_sint64 = try reader.decode(Int64.self)
        case 409: default_fixed64 = try reader.decode(Int64.self)
        case 410: default_sfixed64 = try reader.decode(Int64.self)
        case 411: default_bool = try reader.decode(Bool.self)
        case 412: default_float = try reader.decode(Float.self)
        case 413: default_double = try reader.decode(Double.self)
        case 414: default_string = try reader.decode(String.self)
        case 415: default_bytes = try reader.decode(Data.self)
        case 416: default_nested_enum = try reader.decode(NestedEnum.self)
        case 501: fatalError() // TODO map_int32_int32 map<int32, int32>
        case 502: fatalError() // TODO map_string_string map<string, string>
        case 503: fatalError() // TODO map_string_message map<string, NestedMessage>
        case 504: fatalError() // TODO map_string_enum map<string, NestedEnum>
        default: try reader.readUnknownField(tag: tag)
      }
    }

    self.opt_int32 = opt_int32
    self.opt_uint32 = opt_uint32
    self.opt_sint32 = opt_sint32
    self.opt_fixed32 = opt_fixed32
    self.opt_sfixed32 = opt_sfixed32
    self.opt_int64 = opt_int64
    self.opt_uint64 = opt_uint64
    self.opt_sint64 = opt_sint64
    self.opt_fixed64 = opt_fixed64
    self.opt_sfixed64 = opt_sfixed64
    self.opt_bool = opt_bool
    self.opt_float = opt_float
    self.opt_double = opt_double
    self.opt_string = opt_string
    self.opt_bytes = opt_bytes
    self.opt_nested_enum = opt_nested_enum
    self.opt_nested_message = opt_nested_message
    self.req_int32 = try AllTypes.checkIfMissing(req_int32, "req_int32")
    self.req_uint32 = try AllTypes.checkIfMissing(req_uint32, "req_uint32")
    self.req_sint32 = try AllTypes.checkIfMissing(req_sint32, "req_sint32")
    self.req_fixed32 = try AllTypes.checkIfMissing(req_fixed32, "req_fixed32")
    self.req_sfixed32 = try AllTypes.checkIfMissing(req_sfixed32, "req_sfixed32")
    self.req_int64 = try AllTypes.checkIfMissing(req_int64, "req_int64")
    self.req_uint64 = try AllTypes.checkIfMissing(req_uint64, "req_uint64")
    self.req_sint64 = try AllTypes.checkIfMissing(req_sint64, "req_sint64")
    self.req_fixed64 = try AllTypes.checkIfMissing(req_fixed64, "req_fixed64")
    self.req_sfixed64 = try AllTypes.checkIfMissing(req_sfixed64, "req_sfixed64")
    self.req_bool = try AllTypes.checkIfMissing(req_bool, "req_bool")
    self.req_float = try AllTypes.checkIfMissing(req_float, "req_float")
    self.req_double = try AllTypes.checkIfMissing(req_double, "req_double")
    self.req_string = try AllTypes.checkIfMissing(req_string, "req_string")
    self.req_bytes = try AllTypes.checkIfMissing(req_bytes, "req_bytes")
    self.req_nested_enum = try AllTypes.checkIfMissing(req_nested_enum, "req_nested_enum")
    self.req_nested_message = try AllTypes.checkIfMissing(req_nested_message, "req_nested_message")
    self.rep_int32 = try AllTypes.checkIfMissing(rep_int32, "rep_int32")
    self.rep_uint32 = try AllTypes.checkIfMissing(rep_uint32, "rep_uint32")
    self.rep_sint32 = try AllTypes.checkIfMissing(rep_sint32, "rep_sint32")
    self.rep_fixed32 = try AllTypes.checkIfMissing(rep_fixed32, "rep_fixed32")
    self.rep_sfixed32 = try AllTypes.checkIfMissing(rep_sfixed32, "rep_sfixed32")
    self.rep_int64 = try AllTypes.checkIfMissing(rep_int64, "rep_int64")
    self.rep_uint64 = try AllTypes.checkIfMissing(rep_uint64, "rep_uint64")
    self.rep_sint64 = try AllTypes.checkIfMissing(rep_sint64, "rep_sint64")
    self.rep_fixed64 = try AllTypes.checkIfMissing(rep_fixed64, "rep_fixed64")
    self.rep_sfixed64 = try AllTypes.checkIfMissing(rep_sfixed64, "rep_sfixed64")
    self.rep_bool = try AllTypes.checkIfMissing(rep_bool, "rep_bool")
    self.rep_float = try AllTypes.checkIfMissing(rep_float, "rep_float")
    self.rep_double = try AllTypes.checkIfMissing(rep_double, "rep_double")
    self.rep_string = try AllTypes.checkIfMissing(rep_string, "rep_string")
    self.rep_bytes = try AllTypes.checkIfMissing(rep_bytes, "rep_bytes")
    self.rep_nested_enum = try AllTypes.checkIfMissing(rep_nested_enum, "rep_nested_enum")
    self.rep_nested_message = try AllTypes.checkIfMissing(rep_nested_message, "rep_nested_message")
    self.pack_int32 = try AllTypes.checkIfMissing(pack_int32, "pack_int32")
    self.pack_uint32 = try AllTypes.checkIfMissing(pack_uint32, "pack_uint32")
    self.pack_sint32 = try AllTypes.checkIfMissing(pack_sint32, "pack_sint32")
    self.pack_fixed32 = try AllTypes.checkIfMissing(pack_fixed32, "pack_fixed32")
    self.pack_sfixed32 = try AllTypes.checkIfMissing(pack_sfixed32, "pack_sfixed32")
    self.pack_int64 = try AllTypes.checkIfMissing(pack_int64, "pack_int64")
    self.pack_uint64 = try AllTypes.checkIfMissing(pack_uint64, "pack_uint64")
    self.pack_sint64 = try AllTypes.checkIfMissing(pack_sint64, "pack_sint64")
    self.pack_fixed64 = try AllTypes.checkIfMissing(pack_fixed64, "pack_fixed64")
    self.pack_sfixed64 = try AllTypes.checkIfMissing(pack_sfixed64, "pack_sfixed64")
    self.pack_bool = try AllTypes.checkIfMissing(pack_bool, "pack_bool")
    self.pack_float = try AllTypes.checkIfMissing(pack_float, "pack_float")
    self.pack_double = try AllTypes.checkIfMissing(pack_double, "pack_double")
    self.pack_nested_enum = try AllTypes.checkIfMissing(pack_nested_enum, "pack_nested_enum")
    self.default_int32 = default_int32
    self.default_uint32 = default_uint32
    self.default_sint32 = default_sint32
    self.default_fixed32 = default_fixed32
    self.default_sfixed32 = default_sfixed32
    self.default_int64 = default_int64
    self.default_uint64 = default_uint64
    self.default_sint64 = default_sint64
    self.default_fixed64 = default_fixed64
    self.default_sfixed64 = default_sfixed64
    self.default_bool = default_bool
    self.default_float = default_float
    self.default_double = default_double
    self.default_string = default_string
    self.default_bytes = default_bytes
    self.default_nested_enum = default_nested_enum
    self.map_int32_int32 = try AllTypes.checkIfMissing(map_int32_int32, "map_int32_int32")
    self.map_string_string = try AllTypes.checkIfMissing(map_string_string, "map_string_string")
    self.map_string_message = try AllTypes.checkIfMissing(map_string_message, "map_string_message")
    self.map_string_enum = try AllTypes.checkIfMissing(map_string_enum, "map_string_enum")
    self.unknownFields = unknownFields
  }

  public func encode(to writer: ProtoWriter) throws {
    try writer.encode(tag: 1, value: opt_int32)
    try writer.encode(tag: 2, value: opt_uint32)
    try writer.encode(tag: 3, value: opt_sint32, encoding: .signed)
    try writer.encode(tag: 4, value: opt_fixed32, encoding: .fixed)
    try writer.encode(tag: 5, value: opt_sfixed32)
    try writer.encode(tag: 6, value: opt_int64)
    try writer.encode(tag: 7, value: opt_uint64)
    try writer.encode(tag: 8, value: opt_sint64, encoding: .signed)
    try writer.encode(tag: 9, value: opt_fixed64, encoding: .fixed)
    try writer.encode(tag: 10, value: opt_sfixed64)
    try writer.encode(tag: 11, value: opt_bool)
    try writer.encode(tag: 12, value: opt_float)
    try writer.encode(tag: 13, value: opt_double)
    try writer.encode(tag: 14, value: opt_string)
    try writer.encode(tag: 15, value: opt_bytes)
    try writer.encode(tag: 16, value: opt_nested_enum)
    try writer.encode(tag: 17, value: opt_nested_message)
    try writer.encode(tag: 101, value: req_int32)
    try writer.encode(tag: 102, value: req_uint32)
    try writer.encode(tag: 103, value: req_sint32, encoding: .signed)
    try writer.encode(tag: 104, value: req_fixed32, encoding: .fixed)
    try writer.encode(tag: 105, value: req_sfixed32)
    try writer.encode(tag: 106, value: req_int64)
    try writer.encode(tag: 107, value: req_uint64)
    try writer.encode(tag: 108, value: req_sint64, encoding: .signed)
    try writer.encode(tag: 109, value: req_fixed64, encoding: .fixed)
    try writer.encode(tag: 110, value: req_sfixed64)
    try writer.encode(tag: 111, value: req_bool)
    try writer.encode(tag: 112, value: req_float)
    try writer.encode(tag: 113, value: req_double)
    try writer.encode(tag: 114, value: req_string)
    try writer.encode(tag: 115, value: req_bytes)
    try writer.encode(tag: 116, value: req_nested_enum)
    try writer.encode(tag: 117, value: req_nested_message)
    try writer.encode(tag: 201, value: rep_int32)
    try writer.encode(tag: 202, value: rep_uint32)
    try writer.encode(tag: 203, value: rep_sint32, encoding: .signed)
    try writer.encode(tag: 204, value: rep_fixed32, encoding: .fixed)
    try writer.encode(tag: 205, value: rep_sfixed32)
    try writer.encode(tag: 206, value: rep_int64)
    try writer.encode(tag: 207, value: rep_uint64)
    try writer.encode(tag: 208, value: rep_sint64, encoding: .signed)
    try writer.encode(tag: 209, value: rep_fixed64, encoding: .fixed)
    try writer.encode(tag: 210, value: rep_sfixed64)
    try writer.encode(tag: 211, value: rep_bool)
    try writer.encode(tag: 212, value: rep_float)
    try writer.encode(tag: 213, value: rep_double)
    try writer.encode(tag: 214, value: rep_string)
    try writer.encode(tag: 215, value: rep_bytes)
    try writer.encode(tag: 216, value: rep_nested_enum)
    try writer.encode(tag: 217, value: rep_nested_message)
    try writer.encode(tag: 301, value: pack_int32, packed: true)
    try writer.encode(tag: 302, value: pack_uint32, packed: true)
    try writer.encode(tag: 303, value: pack_sint32, encoding: .signed)
    try writer.encode(tag: 304, value: pack_fixed32, encoding: .fixed)
    try writer.encode(tag: 305, value: pack_sfixed32, packed: true)
    try writer.encode(tag: 306, value: pack_int64, packed: true)
    try writer.encode(tag: 307, value: pack_uint64, packed: true)
    try writer.encode(tag: 308, value: pack_sint64, encoding: .signed)
    try writer.encode(tag: 309, value: pack_fixed64, encoding: .fixed)
    try writer.encode(tag: 310, value: pack_sfixed64, packed: true)
    try writer.encode(tag: 311, value: pack_bool, packed: true)
    try writer.encode(tag: 312, value: pack_float, packed: true)
    try writer.encode(tag: 313, value: pack_double, packed: true)
    try writer.encode(tag: 316, value: pack_nested_enum, packed: true)
    try writer.encode(tag: 401, value: default_int32)
    try writer.encode(tag: 402, value: default_uint32)
    try writer.encode(tag: 403, value: default_sint32, encoding: .signed)
    try writer.encode(tag: 404, value: default_fixed32, encoding: .fixed)
    try writer.encode(tag: 405, value: default_sfixed32)
    try writer.encode(tag: 406, value: default_int64)
    try writer.encode(tag: 407, value: default_uint64)
    try writer.encode(tag: 408, value: default_sint64, encoding: .signed)
    try writer.encode(tag: 409, value: default_fixed64, encoding: .fixed)
    try writer.encode(tag: 410, value: default_sfixed64)
    try writer.encode(tag: 411, value: default_bool)
    try writer.encode(tag: 412, value: default_float)
    try writer.encode(tag: 413, value: default_double)
    try writer.encode(tag: 414, value: default_string)
    try writer.encode(tag: 415, value: default_bytes)
    try writer.encode(tag: 416, value: default_nested_enum)
    // TODO map_int32_int32 map<int32, int32>
    // TODO map_string_string map<string, string>
    // TODO map_string_message map<string, NestedMessage>
    // TODO map_string_enum map<string, NestedEnum>
  }

  public enum NestedEnum : UInt32, CaseIterable, Codable {

    case A = 1

  }

  public struct NestedMessage : Equatable, Proto2Codable, Codable {

    public var a: Int32?
    public let unknownFields: Data

    public init(from reader: ProtoReader) throws {
      var a: Int32? = nil

      let unknownFields = try reader.forEachTag { tag in
        switch tag {
          case 1: a = try reader.decode(Int32.self)
          default: try reader.readUnknownField(tag: tag)
        }
      }

      self.a = a
      self.unknownFields = unknownFields
    }

    public func encode(to writer: ProtoWriter) throws {
      try writer.encode(tag: 1, value: a)
    }

  }

}
